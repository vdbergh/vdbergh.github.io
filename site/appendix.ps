%!PS-Adobe-2.0
%%Creator: dvipsk 5.86 p1.5d Copyright 1996-2001 ASCII Corp.(www-ptex@ascii.co.jp)
%%based on dvipsk 5.86 Copyright 1999 Radical Eye Software (www.radicaleye.com)
%%Title: appendix.dvi
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips appendix -o appendix.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.08.03:2312
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (appendix.dvi)
@start
%DVIPSBitmapFont: Fa cmbx8 8 3
/Fa 3 56 df<EB01E01303131F13FFB5FCA3133F1200B3AE007FB512F0A41C2C7AAB29>
49 D<EB3FF03801FFFE0007EBFF80001F14E0D83F8013F0397F003FF8EC1FFC39FF800F
FEEBC00715FF80A3EA7F80EA3F00C7FCA2EC07FEA2EC0FFC15F8EC1FF0EC3FE015C0EC7F
80ECFE00495AEB03F0495A90380FC00FEB1F00133E01FC131FD801F0131E485A48B512FE
5A5A5A5AB612FCA4202C7CAB29> I<123C123F90B612E0A44815C0168016005D5D397C00
01F80078495A00F8495A485C140F4A5AC748C7FC147E5CA2495A13035C1307A2495AA213
1FA3495AA4137FA96D5A6DC8FC232E7CAC29> 55 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr6 6 1
/Fb 1 51 df<EA01FC3807FF80381C0FC0383003E0386001F0EB00F812F86C13FCA2147C
1278003013FCC7FC14F8A2EB01F0EB03E014C0EB0780EB0F00131E13385B5B3801C00CEA
0380380600185A5A383FFFF85AB512F0A216217CA01E> 50 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc msbm8 8 1
/Fc 1 81 df<B612F8EDFF803A0700E03FE03A0301C01C789138800E1CED060EED07076F
7E17801601A5160317004B5AED0606160EED0E3CED1CF0ED7FC091B5C7FC15F00280C8FC
B300077FB512FEA2292E80AD2E> 80 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmti8 8 31
/Fd 31 122 df<ED3FF8913801FFFE913903F00F8091390FC003C0EC1F00160F143EA214
7E027CEB070093C7FCA214FC5CA5017FB512FEA2903901F0007E167CA213034A13FC5EA3
0107130102C05BA31503010F5C1480A2923807E18016C3131FA2140016C7EE87005B013E
148EED03DEED01FC6F5A017E91C7FC137CA3EA38F812FCA25B12FDEAF1E0EAF3C0EA7F80
001ECAFC2A3D81AE28> 12 D<387FFFC0A2B5FCA26C130012057A901A> 45
D<16E01501821503A21507150FA2151FA2153B157B157315E382EC01C114031581EC0701
A2140EA2141C143C143802707F15005C13015C49B5FCA249C7FCA2130E131E131C498016
7E5B13F0485AA21203D80FF014FFD8FFFC011F13F0A22C2F7CAE35> 65
D<D91FFFED0FFF600100EE3FC0A2F07F8018EF902601EF8014FF943801DF0014CFEF039F
01034B5A183E028F140E171C0107167EDA87C0EB387C14071770010FEDE0FC60010EEC01
C0EE0380011E158193380701F090381C03E0160E013CEC1C036001381438A20178EC7007
04E05B90387001F0EDF1C001F09038F3800F6001E0EBF700A2000102FE131F4B91C7FC13
C0486C6C5AD80FF05DD8FFFE9039F00FFFF815E0402D7BAC40> 77
D<D91FFE903803FFF8A2D900FF9038003F80EF1E00A26F131C49153C6F133814CFA20103
6D137802C714701487EC83F0010715F06F5B1401A2010FEBFC0102005C130E157E011E14
03037F5B011C133FA2013C1487031F90C7FC1338ED0FC7017814CF16EE01701307A201F0
14FE6F5A5B150112015E491300487E120FD8FFFE1470A2352D7BAC35> I<4AB4FC020F13
C091383E03F09138F800FCD903E0133E49487F011FC7FC013EEC0F804914074915C01201
4915E04848140312075B120F485AA248C8FC1607123E127EA348ED0FC0A3EE1F80A21700
485D163E167E6C157C16FC4B5A007C01F05B903903FC03E03A3E070E07C0903906060F80
271F0E071FC7FC390F0C033E018C13F8D803EC5B3901FE0FC03A007FFF0018EB0FF7D900
07133816301670ED80F0ED81E015C3EDFFC0A25E93C7FC6E5AEC00F82B3B75AD37> 81
D<011FB512E016FC903900FE003FEE0FC04AEB07E016030101EC01F0A24A14F8A21303EE
03F05CA20107EC07E017C04AEB0F80EE1F00010F143E16FC9138C007F091B512805B9138
C00FE091388003F06F7E133F6F7E91C7FCA2491301A2017E5CA201FE1303A2495C170800
01163C17384914E0EEF07800031670B5D8C00113E09238007FC0C9EA1F002E2E7BAC34>
I<B53B807FFF803FFFA23D0FF00007F00007F06C48EE03E04C14C019801807030F150018
0E4B7E60153B037B5C0373147803E3147018F0DA01C35C4D5AEC03834D5A3903F0070302
0F4AC7FC020E5C021E140E021C141E0238141C5F027013F803015B14E001F15D14C001F3
ECF9C0028013FBD9F7005C04FFC8FC13FE5E5B00015D5B5E5B495C5E491300402E72AC47
> 87 D<EB07C0EB1FF090387C39C0EBF81FEA01F03803E00FEA07C0120FD81F801380A2
EA3F00141F481400127EA25C00FE133E5AA2EC7E18EC7C385AA214FCD878011378397C03
F870A2393C0F78E0381E1E3D390FF81FC03903E00F001D1F799D24> 97
D<13F8121FA21201A25BA21203A25BA21207A25BA2120FEBC7C0EB9FF0EBF878381FF03C
EBE03EEBC01EEB801FEA3F00A2123EA2007E133FA2127CA2147F00FC137E5AA214FCA214
F8130114F0EB03E0EA780714C0383C0F80381E3E00EA0FF8EA03E0182F78AD21> I<EB01
F8EB0FFE90383E0780EBFC03D801F013C03803E0070007130FEA0FC001801380121F48C8
FCA25A127EA312FE5AA5EC0180007CEB03C0EC0780EC0F006C131E001E137C380F83F038
07FFC0C648C7FC1A1F799D21> I<153EEC07FEA2EC007EA2157CA215FCA215F8A21401A2
15F0A21403EB07C390381FF3E0EB7C3BEBF81FEA01F03903E00FC0EA07C0120FEA1F8015
80EA3F00141F5A007E1400A25C12FE48133EA2EC7E18153848137CA214FCD87801137839
7C03F870A2393C0F78E0381E1E3D390FF81FC03903E00F001F2F79AD24> I<EB03F8EB0F
FEEB3E0FEBF8073901F00380EA03E0EA07C0000F1307D81F8013005C383F001E5C387F03
F8EBFFE049C7FC007EC8FC12FE5AA4127CEC0180EC03C0EC07806CEB0F00141E6C137C38
0F83F03803FFC0C648C7FC1A1F799D21> I<EC01F0EC07FCEC0F9EEC1F1EEC1E3EEC3E7E
A3EC7C381500A314FC5CA590387FFFF0A2903801F000A313035CA413075CA4130F5CA413
1F91C7FCA45B133EA4137E137CA3EA38F812FCA25B12FDEAF1E0EAF3C0EA7F80001EC8FC
1F3D81AE16> I<14F8EB03FE90380F873890381F03F8137EEB7C0113F81201EA03F015F0
EA07E01403120F01C013E0A21407121F018013C0A2140FA21580141F120F143FEC7F006C
6C5AEA03C33801FFBF38007E3E1300147EA2147CA214FC00385BEAFC015C495A48485A38
F01F80D87FFEC7FCEA1FF01D2C7C9D21> I<131FEA03FFA2EA003FA2133EA2137EA2137C
A213FCA25BA21201147E9038F3FF809038F787C03903FE03E013FC13F8A2EA07F013E0A2
13C0000F130715C01380A2001F130F15801300141F481406150E003E133F143E007E141E
EC7E1C007C137CEC3C3812FC157048EB1FE00070EB07801F2F7BAD24> I<130E131FEB3F
80A2EB1F00130E90C7FCA9EA03E0EA0FF0EA1E78EA1C7C12381278127013FCEAF0F812E0
12E1EAC1F0120112035B12075BA2120F13831387121F13075BEA3F0E123EEA1E1C133C13
38EA0FF0EA03C0112E7AAC16> I<EC0380EC07C0140FA3EC070091C7FCA9EB01F0EB07FC
EB0F1E131EEB1C1F13381378EB703FEBF03E13E0A2EBC07E1300147CA214FCA25CA21301
A25CA21303A25CA21307A25CA2130FA25CA2131F003890C7FCEAFC3F133E5B485AEAF1F0
EA7FC0001FC8FC1A3B82AC16> I<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA2
5BA21201EC01E09038F007F0EC1E380003EB3878EC71F8EBE0E1EBE1C13807E381EC00E0
49130013CEEA0FFC13F0A213FF381F9FC0EB87E0EB03F01301003F14301570123EA2007E
14F015E0007C13E014E100FC14C0903800F38048EB7F000070131E1D2F7BAD21> I<137C
EA0FFCA21200A213F8A21201A213F0A21203A213E0A21207A213C0A2120FA21380A2121F
A21300A25AA2123EA2127EA2127CA2EAFC30137012F8A213F013E012F012F113C012FBEA
7F80EA1E000E2F7AAD12> I<3B07801FC007F03B1FE07FF01FFC3B3DF1E0F8783E3B38F3
C078F01E3B78FF007DC01FD870FEEB7F80A2D8F1FC1400D8E1F8137EA249137C00C302FC
5B0003163E495BA200070101147E177C01C05B17FC000F0103ECF83018700180EBE00117
F0001F010715F0040313E0010001C013E0EFE1C048010F1301EFE380003E91398000FF00
001C6DC7123C341F7A9D3A> I<3907801FC0391FE07FF0393DF1E0F83938F3C0783978FF
007CEA70FEA2EAF1FCEAE1F8A25B00C314FC00035C5BA2000713015D13C01403000FECE0
C015E1EB800715C1001F14C3020F13800100138391380787005A158E003EEB03FC001CEB
00F0221F7A9D28> I<EB03F8EB0FFE90383E0F809038FC07C03801F003D803E013E01207
390FC001F01380121FEA3F0014035A127EA2140700FE14E05AA2EC0FC0A2EC1F80A2007C
EB3F00143E5C6C5B381E01F0380F07C06CB4C7FCEA01FC1C1F799D24> I<90383C01F090
38FF07FC3901E79E1E9038C7BC0F000301F81380903887F00702E013C038078FC0130F14
80A2D8061F130F12001400A249131F1680133EA2017EEB3F00A2017C133E157E01FC137C
5DEBFE015D486C485AEC0F80D9F3FEC7FCEBF0F8000390C8FCA25BA21207A25BA2120FA2
EAFFFCA2222B7F9D24> I<3807803E391FE0FF80393CF3C1C03938F781E03878FF07EA70
FE13FC12F139E1F8038091C7FC5B12C312035BA21207A25BA2120FA25BA2121FA290C8FC
A25AA2123E121C1B1F7A9D1E> 114 D<EB0FC0EB7FF0EBF03C3801E01C3803C01EEA0780
143EA2000F133C1418EBC00013F813FF6C13C06C13E06C13F0EA007F130713031301EA78
0012FCA2130100F813E012E0EB03C038F0078038781F00EA1FFCEA07F0171F7A9D1D> I<
131C133EA2137EA2137CA213FCA25BA21201A2B512E0A23803F000A25BA21207A25BA212
0FA25BA2121FA290C7FCA24813C01301123E130314801307003C1300130E131E6C5AEA0F
F0EA07C0132B7AA918> I<EA03C0D80FF01338D81E78137CD81C7C13FC003814F8127812
70EBFC01D8F0F813F012E012E138C1F003000114E0120313E01407000714C013C0A2EC0F
C3000F14871380A2141F158F0007EB3F0E147F01C0131C3903E1E7BC3901FF83F839007E
01E0201F7A9D26> I<3903C001C0390FF003E0391E7807F0EA1C7C123800781303007013
0113FCD8F0F813E012E000E1130038C1F001000114C0120313E014030007148013C0A2EC
0700120F1380140EA25C12076D5A00035B6D5AC6B45A013FC7FC1C1F7A9D21> I<D803C0
1407D80FF09038700F80D81E789038F81FC0381C7C01003814F00078150F00701507EBFC
03D8F0F801E0138012E000E1150326C1F007130700011600000314C013E0020F5B000715
0E01C01380A2161E000F011F131C01801300163C1638167800074913709039C07F80F000
03EC81E03A01E0E7C3C03A00FFC1FF8090263F007EC7FC2A1F7A9D2F> I<EA03C0D80FF0
1338D81E78137CD81C7C13FC003814F812781270EBFC01D8F0F813F012E012E138C1F003
000114E0120313E01407000714C013C0A2140F000F14801380A2141F150000075B5C13C0
3803E1FE3801FFBE38007E3EEB007E147CA2003E5BA2387E01F0A2387C03E0387007C06C
485AD83C3EC7FCEA1FF8EA07E01E2C7A9D23> 121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmr8 8 56
/Fe 56 124 df<14FF010713E090381F80F090383E003849137C4913FC485A1203491378
153092C7FCA7157CB612FCA23803E000157CB3A5486C13FE3A7FFF0FFFE0A2232F7FAE27
> 12 D<13031307130E131C1338137013F0EA01E013C01203EA0780A2EA0F00A2121EA3
5AA45AA512F8A25AAB7EA21278A57EA47EA37EA2EA0780A2EA03C0120113E0EA00F01370
1338131C130E1307130310437AB11B> 40 D<12C07E12707E7E7E120FEA0780120313C0
EA01E0A2EA00F0A21378A3133CA4131EA5131FA2130FAB131FA2131EA5133CA41378A313
F0A2EA01E0A2EA03C013801207EA0F00120E5A5A5A5A5A10437CB11B> I<123C127EB4FC
A21380A2127F123D1201A312031300A25A1206120E5A5A5A126009157A8714> 44
D<B512C0A412047F9018> I<123C127E12FFA4127E123C08087A8714> I<15C014011403
1580A214071500A25C140EA2141E141CA2143C143814781470A214F05CA213015CA21303
5C130791C7FCA25B130EA2131E131CA2133C1338A21378137013F05BA212015BA212035B
A2120790C8FC5A120EA2121E121CA2123C1238A212781270A212F05AA21A437CB123> I<
EB3FC0EBFFF03803E07C48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500FC
14F0B0007C14E0A3007E1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC3800
FFF0EB3FC01C2D7DAB23> I<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFE
A2172C7AAB23> I<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07
E012F000FC14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C
495A495A495A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A
4814C0B6FCA21C2C7DAB23> I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14
C0A2EB800F1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC14
3FEC1F8015C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C
1480001EEB3F00380780FC3801FFF038007FC01C2D7DAB23> I<140EA2141E143EA2147E
14FEA2EB01BE1303143E1306130E130C131813381330136013E013C0EA01801203130012
06120E120C5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>
I<000CEB0180380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF838
0DE07C380F801F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB
07E012E0006014C00070130F6C14806CEB1F006C133E380780F83801FFE038007F801C2D
7DAB23> I<EB03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A239
1F00078091C7FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380
EC07C04814E0A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F8039
07801F003803C03E6C6C5A38007FF0EB1FC01C2D7DAB23> I<1230123C003FB512F8A215
F05A15E039700001C000601480140348EB0700140E140CC7121C5C143014705C495AA249
5AA249C7FCA25B130E131EA2133EA3133C137CA413FCA913781D2E7CAC23> I<EB1FC0EB
FFF03803E07C3807801E48487E001EEB0780A248EB03C0A4123E1407003F1480381FC00F
01E01300EBF81E6C6C5A3807FFF86C13E0C6FCEB3FF8EBFFFC3803C7FFD807831380D81F
0013C0001E133F48EB1FE0007C13070078EB03F012F84813011400A46C14E00078130100
7C14C0003C13036CEB0780390F800F003807E03C3801FFF038003FC01C2D7DAB23> I<EB
3F80EBFFF03803E0783807C03E48487E48487E003E14801407007E14C0127C00FC14E014
03A315F0A5007C1307127EA2003E130F7E6C131F3807803B3803E0F33800FFC390383F03
E013001407A215C0A2140F001E1480003F14005C143E143C003E5B001C5B380E03E03807
FF80D801FEC7FC1C2D7DAB23> I<4A7E4A7EA34A7EA24A7EA3EC1BF81419A2EC30FCA2EC
70FEEC607EA24A7EA349486C7EA2010380EC000FA201066D7EA3496D7EA2011FB57EA290
38180001496D7EA349147EA201E0147F4980A20001ED1F801203000716C0D80FF0EC3FE0
D8FFFC0103B5FCA2302F7EAE35> 65 D<B612FCEDFF803A03F8000FC00001EC03F06F7E
6F7E82167E167FA6167E16FE5E4B5A4B5AED0FE0ED7F8090B6C7FC16E09039F80003F0ED
01FC6F7E167F821780161F17C0A61780163F17005E16FEED03FC0003EC0FF0B712C04BC7
FC2A2D7DAC32> I<B612F815FF3A03F8001FE00001EC03F0ED00F8167E82EE1F80160F17
C0EE07E0A2EE03F0A217F81601A317FCAA17F8A3EE03F0A217E0160717C0160FEE1F80EE
3F00167E5EED03F00003EC1FE0B7128003F8C7FC2E2D7DAC36> 68
D<DA1FF013C09138FFFE01903903F00F8390390F8001E3013FC71277017C143F4848141F
4848140F48481407A248481403121F491401123F90C8FC481500A300FE1600A992381FFF
FEA2007F9138001FE0EE0FC0A27E7F121F7F120F6C7EA26C7E6C6C141FEA007C013F143F
D90F8013F3903903F007C10100B51200DA1FF813002F2F7CAD37> 71
D<B539F03FFFFCA2D803FCC713006C48147EB290B612FEA201F8C7127EB3486C14FFB5D8
F03F13FCA22E2D7DAC35> I<90387FFFF0A201001300147EB3AD123812FEA314FE5C1278
387001F86C485A381E07E03807FF80D801FCC7FC1C2E7DAC24> 74
D<B500F0EB7FFEA2D803FCC7EA1FF06C48EC0FC01700161E16385E5E4B5A4B5A4BC7FC15
0E5D5D15F0EC01C04A5A4A7E4A7E141F4A7EEC73F8ECE1FCEBF9C09038FF80FE9038FE00
7F497F49806F7E6F7E1507826F7E6F7EA26F7E167F821780EE1FC017E0486CEC3FF0B5D8
F001B5FCA2302D7DAC37> I<B512F8A2D803FCC8FC6C5AB3A7160CA41618A41638A21678
16F81501ED07F00003141FB7FCA2262D7EAC2C> I<D8FFF8923807FFC06D5D0003EFF000
00015F01BE151BA2019F1533A3D98F801463A2D987C014C3A2D983E0EB0183A3D981F0EB
0303A2D980F81306A3027C130CA26E1318A36E1330A291380F8060A2913807C0C0A39138
03E180A2913801F300A3EC00FEA2157C487ED80FF04B7EB5D93801B512C0A23A2D7DAC41
> I<D8FFF8903803FFFC7F00019138003FC06DEC0F006D1406EBBF80A2EB9FC0EB8FE013
8780EB83F8138180EB80FE147E147FEC3F80EC1FC0140F15E0EC07F0140315F8EC01FC14
0015FE157FED3F86151F16C6ED0FE6150716F6ED03FE1501A21500167E163EA2486C141E
D80FF0140EB5FC16062E2D7DAC35> I<EC3FF0903801FFFE903907E01F8090391F8007E0
90393E0001F001FCEB00FC4848147E4848804848EC1F8049140F000F16C04848EC07E0A2
48C8EA03F0A24816F8A2007E1501A200FE16FCAA007FED03F8A36C16F06D1407001F16E0
A26C6CEC0FC06D141F000716806C6CEC3F006C6C147E6C6C5C017E495A90391F8007E090
3907E01F80902601FFFEC7FC9038003FF02E2F7CAD37> I<90383F80303901FFF0703807
C07C390F000EF0001E13074813034813011400127000F01470A315307EA26C1400127E12
7FEA3FE013FE381FFFE06C13FC6C13FF00011480D8003F13E013039038003FF0EC07F814
01140015FC157C12C0153CA37EA215787E6C14706C14F06CEB01E039F78003C039E3F00F
0038E07FFE38C00FF01E2F7CAD27> 83 D<B500C090380FFFC0A2D807FCC73803FE006C
48EC00F800015E5F6C7E5F6D1401017E5DA26D4AC7FCA26E5B011F140680010F5CA26D6C
5BA26E133801031430A26D6C5BA26E13E001005C8091387E0180A26E48C8FCA21583EC1F
86A2EC0FCCA215FC6E5AA26E5AA36E5AA26E5A322E7FAC35> 86
D<B53C801FFFF001FFF8A22707FC000190C7EA3FC0D803F06D48EC1F00047E140EA26C6C
027F140CA26D171C0000DBDF801318A26D1738017E9026018FC01330A2017F17706D9026
0307E01360A2028016E0011F90260603F05BA202C01501010F90260C01F85BA202E01503
010790261800FC90C7FCA202F05D010349EB7E06A202F8150E010149EB3F0CA202FC151C
010049EB1F98A202FE15B8DA7F80EB0FF0A2023F5D92C71207A26E5D021E1403A2020E5D
020C1401452E7FAC48> I<EAFFE0A3EAE000B3B3B3A7EAFFE0A30B4379B114> 91
D<EAFFE0A31200B3B3B3A712FFA30B437FB114> 93 D<13FF000713C0380F01F0381C00
F8003F137C80A2143F001E7FC7FCA4EB07FF137F3801FE1FEA07F0EA1FC0EA3F80EA7F00
127E00FE14065AA3143F7E007E137F007FEBEF8C391F83C7FC390FFF03F83901FC01E01F
207D9E23> 97 D<EA07C012FFA2120F1207AC14FE9038C7FF809038CF03E09038DC01F0
9038F8007C49137E49133E497F1680A2150F16C0A9ED1F80A216005D6D133E6D5B01B05B
9038BC01F090380E07E0390607FF80260001FCC7FC222F7EAD27> I<EB1FE0EB7FFC3801
F01E3803E0073907C01F80EA0F80EA1F005A003EEB0F00007E90C7FCA2127C12FCA9127E
A215C07E6C130101801380380FC0033907E007003801F03E38007FF8EB1FC01A207E9E1F
> I<15F8141FA214011400ACEB0FE0EB7FF83801F81E3803E0073807C003380F8001EA1F
00481300123E127EA25AA9127C127EA2003E13017EEB8003000F13073903E00EFC3A01F0
3CFFC038007FF090391FC0F800222F7EAD27> I<EB1F80EBFFF03803E0783807C03E380F
801E381F001FEC0F80123E007E130715C0127C12FCA3B6FCA200FCC8FCA5127EA2003E14
C0123F6C1301390F80038001C013003803E00F3801F03C38007FF8EB1FC01A207E9E1F>
I<EB03F0EB0FFCEB3E1EEB7C3F13F8EA01F0A23803E00C1400AAB512E0A23803E000B3A6
487E387FFF80A2182F7FAE16> I<013F13F89038FFC3FE3903E1FF1E3807807C000F140C
391F003E00A2003E7FA76C133EA26C6C5A00071378380FE1F0380CFFC0D81C3FC7FC90C8
FCA3121E121F380FFFF814FF6C14C04814F0391E0007F848130048147C12F848143CA46C
147C007C14F86CEB01F06CEB03E03907E01F803901FFFE0038003FF01F2D7E9D23> I<EA
07C012FFA2120F1207AC14FE9038C3FF809038C703E09038DE01F013F8496C7EA25BA25B
B2486C487E3AFFFE1FFFC0A2222E7EAD27> I<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7
FCA8EA07C012FFA2120F1207B3A5EA0FE0EAFFFCA20E2E7EAD14> I<EA07C012FFA2120F
1207ADEC1FFEA2EC0FF0EC07C05D020EC7FC5C5C5C5CEBC3C013C7EBCFE0EBDFF013F9EB
F0F8497EEBC07E143E80816E7E14076E7E816E7E486C487E3AFFFE07FF80A2212E7EAD25
> 107 D<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFEA20F2E7EAD14> I<2607C07FEB
07F03BFFC3FFC03FFC903AC783F0783F3C0FCE01F8E01F803B07DC00F9C00F01F8D9FF80
13C04990387F000749137EA249137CB2486C01FEEB0FE03CFFFE0FFFE0FFFEA2371E7E9D
3C> I<3807C0FE39FFC3FF809038C703E0390FDE01F0EA07F8496C7EA25BA25BB2486C48
7E3AFFFE1FFFC0A2221E7E9D27> I<EB1FE0EB7FF83801F03E3803C00F3907800780390F
0003C04814E0003EEB01F0A248EB00F8A300FC14FCA9007C14F8A26CEB01F0A26CEB03E0
A2390F8007C03907C00F803901F03E0038007FF8EB1FE01E207E9E23> I<3807C0FE39FF
C7FF809038CF03E0390FDC01F03907F800FC49137E49133E49133FED1F80A3ED0FC0A815
1F1680A2ED3F00A26D137E6D137C5D9038FC01F09038CE07E09038C7FF80D9C1FCC7FC01
C0C8FCA9487EEAFFFEA2222B7E9D27> I<380781F838FF87FEEB8E3FEA0F9CEA07B813B0
EBF01EEBE000A45BB0487EB5FCA2181E7E9D1C> 114 D<3801FE183807FFB8381E01F8EA
3C00481378481338A21418A27E7EB41300EA7FF06CB4FC6C13C06C13F0000113F838001F
FC130138C0007E143EA26C131EA27EA26C133CA26C137838FF01F038E3FFC000C0130017
207E9E1C> I<1360A413E0A312011203A21207121FB512F0A23803E000AF1418A7143838
01F03014703800F860EB3FE0EB0F80152A7FA81B> I<D807C013F800FF131FA2000F1301
00071300B21401A314033803E007EC0EFC3A01F81CFFC038007FF890391FE0F800221F7E
9D27> I<3AFFFC01FFC0A23A0FE0007E000007147C15380003143015706C6C1360A26C6C
5BA390387C0180A26D48C7FCA2EB3F07EB1F06A2EB0F8CA214DCEB07D8A2EB03F0A36D5A
A26D5A221E7F9C25> I<3AFFFC01FFC0A23A0FE0007E000007147C1538000314306D1370
00011460A26C6C5BA2EBFC01017C5BEB7E03013E90C7FCA2EB1F06A2148EEB0F8CA2EB07
D8A2EB03F0A36D5AA26D5AA2495AA2130391C8FC1278EAFC06A25B131CEA7838EA7070EA
3FE0EA0F80222B7F9C25> 121 D<003FB51280A2EB003F003C14000038137E00305BEA70
0100605B495A495A130F00005B495A49C7FC5B137E9038FC0180EA01F8120313F03807E0
03EA0FC0001F1400138048485A007E5B00FE133FB6FCA2191D7E9C1F> I<B712C0A22202
809223> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff msam10 10 1
/Ff 1 4 df<007FB812F8B912FCA300F0CA123CB3B3ACB912FCA36C17F836387BB741> 3
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmbx7 7 1
/Fg 1 83 df<B612FCEDFFC016F83A03FE000FFEED03FF03007F83167F83A55F16FF5F03
0390C7FCED0FFE90B612F816C0A29039FE003FF0ED0FF86F7EA26F7EA482A3186018F017
808117C1B5D8F800EBE3E093387FFFC0041F1380C93803FE0034297DA738> 82
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmsy5 5 4
/Fh 4 107 df<B612FEA31F037A8B2D> 0 D<13E0A438F0E1E0EAF843387E4FC0380F5E
00EA01F0A2EA0F5E387E4FC038F843E0EAF0E13800E000A413127B921F> 3
D<D801FCEB01FC3A07FF8007FF001F9039C01F83C03B3C07F03C00E0277001F870137027
6000FCE0133000E0D93FC01318486D5AA26E7EA24A6C13380060D939F813300070D970FC
13703B3801E07F01E03B1E0FC01FFFC02707FF000F1300D801FCEB01FC2D127B9139> 49
D<12E0B3B3A50329799E13> 106 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmti10 10 15
/Fi 15 119 df<120EEA3F80127F12FFA31300127E123C0909778819> 46
D<0107B612F817FF1880903B000FF0003FE04BEB0FF0EF03F8141FEF01FC5DA2023F15FE
A25DA2147FEF03FC92C7FCA24A15F817074A15F0EF0FE01301EF1FC04AEC3F80EFFE0001
034A5AEE0FF091B612C04CC7FCD907F8C9FCA25CA2130FA25CA2131FA25CA2133FA25CA2
137FA291CAFCA25BA25B1201B512FCA337397BB838> 80 D<14F8EB07FE90381F871C90
383E03FE137CEBF801120148486C5A485A120FEBC001001F5CA2EA3F801403007F5C1300
A21407485C5AA2140F5D48ECC1C0A2141F15831680143F1587007C017F1300ECFF076C48
5B9038038F8E391F0F079E3907FE03FC3901F000F0222677A42A> 97
D<147F903803FFC090380FC1E090381F0070017E13784913383901F801F83803F0031207
13E0120FD81FC013F091C7FC485AA2127F90C8FCA35A5AA45AA3153015381578007C14F0
007EEB01E0003EEB03C0EC0F806CEB3E00380F81F83803FFE0C690C7FC1D2677A426> 99
D<147F903803FFC090380FC1E090383F00F0017E13785B485A485A485A120F4913F8001F
14F0383F8001EC07E0EC1F80397F81FF00EBFFF891C7FC90C8FC5A5AA55AA21530007C14
381578007E14F0003EEB01E0EC03C06CEB0F806CEB3E00380781F83803FFE0C690C7FC1D
2677A426> 101 D<ED07C0ED1FF0ED3E38ED7C3CEDF8FC15F9140115F1020313F8EDF0F0
160014075DA4140F5DA4141F5D010FB512C05B16809039003F800092C7FCA45C147EA414
FE5CA413015CA413035CA413075CA4130F5CA3131F5CA391C8FC5B121CEA7E3EA2EAFE3C
137C1378EAF8F01278EA3FC0EA0F80264C82BA19> I<EB01C0EB07E014F0130F14E01307
EB038090C7FCAB13F0EA03FCEA071EEA0E1F121CA212385B1270A25BEAF07E12E013FEC6
5AA212015B1203A25B12075BA2000F13E013C013C1001F13C01381A2EB83801303EB0700
A2130E6C5AEA07F8EA01E0143879B619> 105 D<EB0FC0EA07FFA3EA001F1480A2133FA2
1400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA2
5BA2123FA290C7FCA25AA2EA7E0EA212FE131EEAFC1CA2133C133812F81378EA7870EA7C
E0121FEA0F80123B79B915> 108 D<D801E013FE3A07F803FF803A0E3C0F07C03A1E3E3C
03E0261C1F787F39383FF00114E0007813C000708114804A485AEAF07FEAE07EA2000014
0701FE5C5BA2150F00015D5B151F5E12034990383F8380160316070007027F130049137E
A2160E000F147C49141E161C5E001FEC3C7849EB1FE00007C7EA0780292679A42F> 110
D<147F903803FFC090380FC1F090381F00F8017E137C5B4848137E4848133E0007143F5B
120F485AA2485A157F127F90C7FCA215FF5A4814FEA2140115FC5AEC03F8A2EC07F015E0
140F007C14C0007EEB1F80003EEB3F00147E6C13F8380F83F03803FFC0C648C7FC202677
A42A> I<ECF803903807FE0790381F871F90383E03BF017C13FEEBF80112013803F00048
4813FC120F5B001F130115F8EA3F80A2007F1303010013F0A34813074814E0A3140F4814
C0A3141F1580143FA2007C137FECFF006C5AEB03BF381F0F7F3807FE7EEA01F0C7FC14FE
5CA313015CA313035C130748B512C0A3203577A426> 113 D<3903C003F0390FF01FFC39
1E783C0F381C7C703A3C3EE03F8038383FC0EB7F800078150000701300151CD8F07E90C7
FCEAE0FE5BA2120012015BA312035BA312075BA3120F5BA3121F5BA3123F90C9FC120E21
2679A423> I<14FE903807FF8090380F83C090383E00E04913F00178137001F813F00001
130313F0A215E00003EB01C06DC7FC7FEBFFC06C13F814FE6C7F6D13807F010F13C01300
143F141F140F123E127E00FE1480A348EB1F0012E06C133E00705B6C5B381E03E06CB45A
D801FEC7FC1C267AA422> I<13F8D803FEEB01C0D8078FEB03E0390E0F8007121E121C00
38140F131F007815C01270013F131F00F0130000E015805BD8007E133FA201FE14005B5D
120149137EA215FE120349EBFC0EA20201131E161C15F813E0163CD9F003133814070001
ECF07091381EF8F03A00F83C78E090393FF03FC090390FC00F00272679A42D> 117
D<01F0130ED803FC133FD8071EEB7F80EA0E1F121C123C0038143F49131F0070140FA25B
D8F07E140000E08013FEC6485B150E12015B151E0003141C5BA2153C000714385B5DA35D
A24A5A140300035C6D48C7FC0001130E3800F83CEB7FF8EB0FC0212679A426> I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmbx10 10 8
/Fj 8 110 df<EA0F80EA3FE0EA7FF0A2EAFFF8A5EA7FF0A2EA3FE0EA0F800D0D798C1B>
46 D<141E143E14FE1307133FB5FCA313CFEA000FB3B3A6007FB61280A4213779B630>
49 D<ED03E04B7EA24B7EA34B7EA24B7EA34B7EA292B57EA34A8015F302038015E1A202
078015C0020F80ED807FA2021F80ED003F4A80023E131FA2027E80027C7F02FC814A7FA2
0101824A7F49B77EA3498202C0C7FC010F824A147FA2011F8291C8123F4982013E151FA2
017E82017C8101FE83B500F80107B61280A4413A7DB948> 65 D<B7FCA426007FF8C9FC
B3ACEF0780A5170F1800A35FA25FA25F5F5E5EEE0FFE167FB8FCA431397DB839> 76
D<B712FCEEFFE017FC17FF28007FF8000F13C004017F707F717E717EA2717EA284A760A2
4D5A604D5A4D5A04035B041F90C8FC91B612FC17E0839139F8003FFCEE0FFF707F707F82
84A2707FA584A51A601AF084177F1901DD3FFE13E0B600FC011F130394390FFF87C071EB
FF8005011400CBEA1FFC443A7DB848> 82 D<EB3FFE0003B512E0000F14F8391FF00FFE
003FEB03FF6D6C7F6E7FA26F7EA26C5A6C5AEA0380C8FCA2EC3FFF010FB5FC137F3901FF
F87F00071380380FFE00EA3FF85B485A12FF5BA415FF6D5A127F263FF00713F83B1FFC1F
BFFFC0390FFFFE1F0003EBF80F39003FE0032A257DA42E> 97 D<903803FF80011F13F0
017F13FC3901FF83FE3A03FE007F804848133F484814C0001FEC1FE05B003FEC0FF0A248
5A16F8150712FFA290B6FCA301E0C8FCA4127FA36C7E1678121F6C6C14F86D14F0000714
03D801FFEB0FE06C9038C07FC06DB51200010F13FC010113E025257DA42C> 101
D<01FED97FE0EB0FFC00FF902601FFFC90383FFF80020701FF90B512E0DA1F81903983F0
3FF0DA3C00903887801F000749DACF007F00034914DE6D48D97FFC6D7E4A5CA24A5CA291
C75BB3A3B5D8FC1FB50083B512F0A44C257DA451> 109 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmsy7 7 9
/Fk 9 107 df<B712FEA327037A8F34> 0 D<1238127C12FEA3127C123807077A9114> I
<1338A50060130C00F8133E00FC137E00FE13FE383FBBF83807FFC000011300EA007C48
B4FC000713C0383FBBF838FE38FE00FC137E00F8133E0060130C00001300A517197B9A22
> 3 D<EC7FC0903803FFF890380F803E90393C00078001F0EB01E0D801C0EB0070484880
0007153C486C147ED80CE014E6D81C70EB01C7486C9038038380D8301CEB0701D8700E01
0E13C0D86007EB1C006D6C5A27E001C07013E0486C6C481360EC71C0EC3B80021FC7FC14
0E141FEC3B80EC71C0ECE0E027E001C07013E0276003803813C049487ED8700EEB0E01D8
301C01071380D83838EB03836C48903801C700D80CE0EB00E6D80FC0147E6C48143C0003
15386C6C5CD800F0495A013CEB078090260F803EC7FC903803FFF89038007FC02B2B7CA3
34> 10 D<D801FE15603807FF80487F4813F0263F03F814E0383C00FC48017E14C00070
011F1301006090380FC00300E0903907E00780913803F81F486DB512006E6C5A6F5AED0F
F02B0F7C9534> 24 D<13E0EA01F0EA03F8A3EA07F0A313E0A2120F13C0A3EA1F80A213
00A25A123EA35AA3127812F8A25A12100D1E7D9F13> 48 D<017F157F2601FFE0903803
FFC0000701F890380FF1F0260F83FC90381F0038261E00FF013C7F001890263F8078130C
4890261FC0E07F007090260FE1C07F0060EB07E3913803F780486DB4C7EA01806E5A157E
157F81824B7E0060DAF7E0EB0300913801E3F0DBC3F85B6C90260381FC13066C90260F00
FE5B001C011E90387F803C6C017C90381FE0F82607C7F86DB45A2601FFE0010313C06C6C
C86CC7FC391B7C9942> I<EC07FCEC3FFF49B51280903803E07F90380F001F011E130F49
1400495B01F8131C4990C7FC1201A37F7F13FF6C13E0EB7FFE131FEB0FF8013FC8FC1378
EA01E0485A485A48C9FC121E123E123C127C127812F815785D6C495A4A5A6C495A007F49
C7FCEBE07C6CB45A6C13C0D803FEC8FC212A7DA824> 69 D<12E0B3B3B3A5033B78AB14>
106 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmmi5 5 7
/Fl 7 120 df<3803FFFC5CD8003EC7FCA45BA45BA4485AA3150C48481318A215381530
4848137015F0EC01E0140FB612C0A21E1C7C9B28> 76 D<D803FF913801FF805E260037
80903807F000160DA21619D963C0495AA2166316C301C349485AEBC1E0ED03071506D801
8149485AEB80F015181530D803004948C7FC147815C0EC79800006153EEC7B00143E000E
133CD8FFE0903807FFE01438311C7C9B35> I<9039FFF80FFEA290390FC003E0D907E013
0015066D6C5A5D6D6C5A15E0903800FDC0ECFF806EC7FC80A281147FECEFC0EB01CF9038
0307E01306496C7E1318496C7E136048486C7E0007803A7FF007FFE012FF271C7D9B2E>
88 D<D87FFCEB3FF012FFD807E0EB0F00151C6C6C5B5D6C6C5B4A5A6C6C485A4AC7FCEB
7E0E5C6D5A5C6D5A5C6D5A91C8FC5BA3131E133EA43807FFE0A2241C7D9B22> I<90B512
FEA23901F800FC9038E001F83903C003F090388007E09038000FC00006EB1F80EC3F0014
7EC75A495A495A495A495A495A90383F0030137E491360485A484813E0484813C0380FC0
01391F800380383F0007007E133FB61200A21F1C7B9B27> I<EBFC103803FE70380787F0
EA0E01001C13E012381278A238F003C0A4EB0780A2EA700FEA383F381FFF00EA0FCFEA00
0FA2131EA43801FFC05A141A7C911B> 113 D<390F800C073A1FC01E0F80EA39E0006114
07EC3C0300C11401EA03C0A29138780300EA0780A21506A25DECF8183903C1BC303901FF
3FE039007E0FC021127D912A> 119 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmr5 5 6
/Fm 6 51 df<B612FCA2007EC7FC6C143C6C6C131C6C6C130E6C7E6D13066C7E6C7E6C6C
1300137F7F6D7E130F6DC7FC130E4913065B5B49130EEA018048C7121C000E143C4814FC
003FB5FC5AB6FC1F1C7C9B28> 6 D<13301360EA01C0EA038013001206120E5AA25AA35A
A312F0AB1270A37EA37EA27E12067E1380EA01C0EA006013300C297B9E16> 40
D<12C0126012387E120C7E1207EA0380A2EA01C0A3EA00E0A313F0AB13E0A3EA01C0A3EA
0380A2EA070012065A121C5A12605A0C297C9E16> I<EA01FCEA07FF380F0780381C01C0
383800E0A2007813F000701370A200F01378AB00701370A2007813F0003813E0A2381C01
C0380F07803807FF00EA01FC151D7D9B1C> 48 D<1360EA01E0120F12FF12F11201B3A3
387FFF80A2111C7B9B1C> I<EA03FCEA0FFF383C0FC0387003E0387801F0EAFC0014F8A2
14781278C712F814F0A2EB01E0EB03C0EB0780EB0F00131C5B13E03801C018EA0380EA06
00481338383FFFF05AB5FCA2151C7D9B1C> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn msbm7 7 4
/Fn 4 91 df<B6FC15F0390E0E03FC39060C01CF913800E380ED61C0ED70E0ED30601670
1630A516701660ED70E0ED61C0EDE380EDC700EC03FE90380FFFF815C0010CC8FCAEEA0E
0EB512E0A2242880A72D> 80 D<B538E0FFFEA23A1C060039E0000EEC1B80D80607EB1F
00D80703131E390383801CD801C15B0000EBC0309038E0E07090387060E090383071C090
38383B80D91C1BC7FCEB0C1FEB0E0EEB0706EB0307EC8380EB01C101007F6E7EEC7060EC
F070496C7E9038039C18EC0C1C9038070E0E90380E070690381C03070138EB8380903870
018101E0EBC1C00001903800C0E00003ECE060D80760EB6070000EEC7038D81C70141C26
FFFC0FB5FCA228287FA735> 88 D<B5EB1FFFA2D83818EB039C001CEC01B8D80C1C14F0
D80E0C14E0D8060E14C0EA0706D80307EB03800183140000016D5A9038C1C00ED800C05B
9038E0E01890386060389038707070903830306090383838E090381819C090381C1F80D9
0C0FC7FC130EEB060613071303ADEB070790387FFFF0A228287FA736> I<003FB612C0A2
3A33E0038180D83F001303003C903807070048EB06060070EB0E0EEC1C0C0060EB181CEC
3838C7EA7030EC6070ECE0E049485A148190380383800203C7FC495AEB0E06EB0C0EEB1C
1CEB3818EB3038EB7070EBE060EBC0E03801C1C0D981801360EA0383D80703C7FCD80607
14E0EA0E0ED81C0C1301D8181C1303D83838EB07C0D87030130ED86070131CD8E0E013F8
B7FCA223287EA737> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmmi7 7 19
/Fo 19 122 df<EA01F0EA03FCEA007E7FA26D7EA2130F80A26D7EA2130380A26D7EA26D
7EA2147C147EA2147F495AEB039F01071380EB0F1F90381E0FC0133C90387807E013F038
01E003000314F0EA07C0390F8001F8EA1F00003E13004814FC5A48147E0070143F20297C
A727> 21 D<137001F81338157CA248485BA44848485AA44848485AA44848485AEDC180
A3001F90380F8300A2141F9038C03786393FE0E7CC9038FFC3FC393E7F00F090C9FC5AA4
5AA45A5A21267D9928> I<010FB5FC013F148049140048B6FC2603F07EC7FC3807C01FEA
0F80497E5A123EA2003C5B127CA30078133E12F8143C0078137C14785C6C485A495A381E
0F80D80FFEC8FCEA03F8211A7D9826> 27 D<1238127C12FEA3127C123807077A8614>
58 D<1238127C12FE12FFA2127F123B1203A31206A3120C121812381270122008127A86
14> I<013FB512F816FF903A01FC001FC04AEB07E0EE03F001031401A24A14F8A2130717
F04A130317E0010F1407EE0FC04AEB1F80EE7E00011F495A91B512F0A291388001FC013F
EB007E8291C7EA1F80160F4915C0A2137EA213FEEE1F805BEE3F000001153E16FE49EB01
F84B5A0003EC1FC0B7C7FC15F82D287DA732> 66 D<90383FFFF8A2D901FCC7FC5CA213
03A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCA249141C1618137E163801
FE1430167049146016E000011401ED03C0491307ED0F800003147FB7FC160026287DA72E
> 76 D<903B3FFFE00FFFC0A2010190390001FC006D4814F017C0027F495A4CC7FC6E13
0E6F5A021F5B6F5A5E91380FE1C0EDE380DA07F7C8FC15FE6E5A5D6E7EA2811403EC077F
140E4A7E02187FEC301F02607F14C049486C7EEB030001066D7E5B01386D7E5B01F06D7E
485AD80FF0497ED8FFFC90381FFFE0A232287DA736> 88 D<B56CEB7FF8A2D80FF0C7EA
1F800007ED1E006D141C00035D5E6C6C5C4B5A6C6C495A93C7FC017F13065D5D6D6C5A5D
90381FC0E0ECC1C090380FE38002E7C8FC14E6EB07FC5C6D5AA25C1307A35C130FA35C13
1FA3133F380FFFFCA22D287CA727> I<010FB612C05B9139E0003F800280EB7F00013EC7
12FE013C495A0138495A49495A4B5A0160495A01E0495A4949C7FC5D90C75A4A5A4A5A4A
5A4A5A4A5A4A5A4AC8FC14FE495A495A494813304948137049481360133F4A13E049C75A
01FE1301485A4848495A485A484813074848130F4848013FC7FC484848B4FCB7FC5D2A28
7CA72D> I<EA01F0123FA2EA03E0A21207A25BA2120FA25BA2121F139FEB3FC0EBE0E038
3FC0F0EB0078A2123E007E137CA2127CA212FC14F85AA338F001F0A214E0130314C0EB07
8038700F00EA781E6C5AEA1FF0EA07C016297CA71D> 98 D<EC03E0EC0FF0EC1E38EC3C
3C157CEC7CFC1478ECF8F815701500A2495AA590B512E0A2903803E000A4495AA5495AA6
49C7FCA5133EA4133C137C123CEA7C78127EEAFC7013F0EA78E0EA71C0EA3F80001EC8FC
1E357CA820> 102 D<130E131F5BA2133E131C90C7FCA7EA03E0487EEA0C78EA187C1230
A212605B12C0A2EA01F0A3485AA2485AA2EBC180EA0F81A2381F0300A213066C5A131CEA
07F06C5A11287DA617> 105 D<3B07801FC007E03B0FE07FF01FF83B18F0E0F8783C3B30
F1807CE03E903AFB007D801ED860FEEB3F005B49133E00C14A133E5B1201A24848495BA3
5F4848485A1830EE01F0A23C0F8003E003E060A218C0933801E180271F0007C013E39338
00FF00000E6D48137C341B7D993B> 109 D<3907801FC0390FE07FF03918F0E0F83930F1
807CEBFB00D860FE133C5B5B00C1147C5B1201A248485BA34A5AEA07C01660EC03E0A23A
0F8007C0C0A2EDC180913803C300D81F0013C7EC01FE000EEB00F8231B7D9929> I<EB1F
03EB7F873801E0CF3803C07FEA0780380F003E5A121E003E137E003C137C127CA24813FC
14F8A3EAF00114F0A3130314E0EA7007EA780FEA3C3F381FF7C0EA07C7EA0007130F1480
A3131F14005B3803FFF0A218257C991E> 113 D<D803E0EC0380486CEB7007D80C789038
F80FC0EA187C0030903801F0071603126001F8140100C0D903E01380A2EA01F0A2913907
C00300EA03E0A33A07C00F8006A25EA2160816180003011F5B01E0EBC0703A01F073E0E0
3A00FFE1FF8090261F807FC7FC2A1B7D9930> 119 D<90387C03C03901FF0FF03907079C
30390E03B078000CEBF0F8001813E1123015F0396007C0E015001200A2495AA449C7FC15
301238007C1460EAFC3E15C0EAF87E39F06F03803970C70700383F83FE381F01F81D1B7D
9926> I<EA03E0486C1370D80C7813F8EA187C0030EB01F0A2126013F800C0EB03E0A2EA
01F0A2EC07C0EA03E0A33907C00F80A4EC1F00A25C00035B3801E0FE3800FFBEEB3F3E13
005C121E003F5B5C387E01E0383C03C038300780D81C1FC7FCEA0FFCEA07F01D267D9922
> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmr7 7 19
/Fp 19 115 df<B712F8A26CC712076DEB00FC6C6C147C6C6C143C000F151C7F6C6C140C
6C7E000115067F6C7E6D1400806D7E6D7E130F806D7E13036D5A5C5C495A49C8FC010E14
065B5B49140C5B4848141C485A48C8123C000E157C4815FC48EC07F8007FB6FCB7FCA227
287DA72F> 6 D<1306130C13181330136013E0EA01C0EA0380A2EA07005A120E121EA212
1C123CA35AA512F85AAB7E1278A57EA3121C121EA2120E120F7EEA0380A2EA01C0EA00E0
136013301318130C13060F3B7AAB1A> 40 D<12C012607E7E7E120E7EEA0380A2EA01C0
13E0120013F0A213701378A3133CA5133E131EAB133E133CA51378A3137013F0A213E012
0113C0EA0380A2EA0700120E120C5A5A5A5A0F3B7DAB1A> I<EB3F803801FFF03803E0F8
3807803C48487E001E7F003E1480A2003C1307007C14C0A400FC14E0AE007C14C0A36CEB
0F80A36CEB1F006C131E6C6C5A3803E0F86CB45A38003F801B277EA521> 48
D<13381378EA01F8121F12FE12E01200B3AB487EB512F8A215267BA521> I<13FF000313
E0380E03F0381800F848137C48137E00787F12FC6CEB1F80A4127CC7FC15005C143E147E
147C5C495A495A5C495A010EC7FC5B5B903870018013E0EA0180390300030012065A001F
B5FC5A485BB5FCA219267DA521> I<13FF000313E0380F01F8381C007C0030137E003C13
3E007E133FA4123CC7123E147E147C5C495AEB07E03801FF8091C7FC380001E06D7E147C
80143F801580A21238127C12FEA21500485B0078133E00705B6C5B381F01F03807FFC0C6
90C7FC19277DA521> I<1438A2147814F81301A2130313071306130C131C131813301370
136013C012011380EA03005A120E120C121C5A12305A12E0B612E0A2C7EAF800A7497E90
383FFFE0A21B277EA621> I<0018130C001F137CEBFFF85C5C1480D819FCC7FC0018C8FC
A7137F3819FFE0381F81F0381E0078001C7F0018133EC7FC80A21580A21230127C12FCA3
150012F00060133E127000305B001C5B380F03E03803FFC0C648C7FC19277DA521> I<EB
0FE0EB3FF8EBF81C3801E0063803C01F48485AEA0F005A121E003E131E91C7FC5AA21304
EB3FC038FCFFF038FDC078EB003CB4133E48131E141FA2481480A4127CA4003C1400123E
001E131E143E6C133C6C6C5A3803C1F03801FFC06C6CC7FC19277DA521> I<B812E0A3CB
FCABB812E0A32B117D9633> 61 D<B539C07FFFE0A23B07F80003FC006C486D5AAF90B6
FCA29038F00001B1486C497EB539C07FFFE0A22B287EA731> 72
D<B512C0A23807F8006C5AB3B0487EB512C0A212287EA718> I<EC03E0143FA214071403
AAEB3F833801FFE33803E03B3807800F380F0007481303123E127E127CA212FCA7127CA2
127E123E001E1307001F130F390F801FF03903E073FE3801FFE339007F03E01F297EA725
> 100 D<130EEB3F80A5EB0E0090C7FCA7EB0F80EA01FFA2EA001F130FB3A8127812FCEB
1F00A2133EEA707CEA3FF8EA0FE0113483A715> 106 D<260F81FC137F3BFF8FFF03FFC0
903A9C0F8703E03B1FB007CC01F0D80FE013D8903AC003F000F8A301805BAF486C486C48
7E3CFFF83FFE0FFF80A2311A7E9937> 109 D<EB3F80EBFFE03803E0F83807803C48487E
001E7F003E1480A248EB07C0A300FC14E0A7007C14C0A2007E130F003E1480001E140000
1F5B380F803E3803E0F86CB45A38003F801B1C7E9A21> 111 D<380F81FC38FF8FFF9038
BC0FC0391FF007E0390FC003F0EB800115F8EC00FCA2157C157EA7157C15FCA2EC01F801
C013F0EC03E09038F007C09038BC1F8090388FFF00EB83F80180C7FCA7487EEAFFF8A21F
257E9925> I<380F07C038FF1FF0EB38F8EA1F71EA0F6113C1EBC0F014005BAF487EEAFF
FCA2151A7E991A> 114 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq msbm10 10 5
/Fq 5 91 df<DB7FF813600207B513E0023F14C09139FFF81FF101039038C007FF90390F
EF0001D91F9EEB007FD93E3C143CD97878141ED9F070140F2601E0F0140748485AD80781
1503380F01C0D80E031501001E5B001C1600EA3C07003890C9FCA200781760007017005B
130E12F012E0AB12F01270130F7F12781238A2003C7FEA1C03121E000E6D150CD80F0116
1C260781E0153CD803C016786C6C6C15F02600F0701401D97878EC03E0D93E3CEC07C0D9
1F9FEC1F8090260FEFC0EB7F00903A03FFF807FC010090B55A023F14E002071480912600
7FF8C7FC363D7DBA27> 67 D<007FB612C0B712FC6C15FF2703C01E071380000190393C
01C7E00238EBE1F0923800E0F81738EEF03CEE701C171E170EA7171E171CEEF03CEEE038
17F8923801E1F0EEC7E0923803FF80023FB5120016FC16E00238C8FCB3A60003133C007F
B512F0B6FC7E2F397EB834> 80 D<B639C03FFFFE03E08003C05C3C1F007C00078FE000
070138D9039FC7FC018015BE2603C03C14F82601E01C5C0000011E5C6D6C5CD97807495A
01386D48C8FCD93C03130E011EEBC01E6D6C6C5AD907005B913880F070903903C078F001
01EB39E09138E03FC06D6C6C5AEC700F027890C9FC6E6C7EEC1C03021E7F6E6C7EEC0700
6F7E913803C07802011338EDE03C6F7E160E913803F80F913907BC078091380F1C03DA1E
1E7F4A6C6C7E913878070002F06D7E9139E003C078010101011338D903C0EBE03C902607
80007F49C7EAF00E011EEC780F013E913838078049EC3C0301FC021C7F000192381E01E0
D803DC91380E00F0D8079E1670D81F0F021E137CB5D8C007B6FC02E0168002C016003939
7EB83C> 88 D<267FFFFE49B5FCB65B6C497F260E00709038003C78000FEE1E70D80780
ED0FF000030178EC07E06D6C15C03801E01C0000011E1580D9F00E1500D9700F5C902678
0780130ED93C03141E011C6D131CD91E01143C010E6D133890260F00F013789026078070
13700103017813F0DAC0385B0101EB3C016E6C485A902600F00E5B9138700F07DA780790
C7FC0238138F91383C03CE91381E01DE020E13FCEC0F006E5BED8078913803C0381401B2
0203133C4A487E91B612F85B7F38397EB83D> I<0007B712FC5AA23B0E1FF003C038903A
3F0007807801FC4A5AD80FF0495B49EB0E01D81F80011E5BED3C0390C738380780001E02
7890C7FCED700FEDF00E001C903801E01E4B5A02031338C7EB80780207137091380F00F0
91380E01E0021E5BEC1C03023C5BEC3807027890C8FC4A5AECE01E0101131CECC03C0103
133890380780784A5A495BEB0E01011E49EB0180D93C0314039038380780017890C7FCD9
700F1407EBF00E3801E01E4948EC0F0000031338D980785C00071370D900F05C48495CD8
1E0115F7261C03C0EB01E7003C49495AD83807EC0F8E007890C7EA3F0E4848EB01FEB812
FEA331397DB83E> I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmsy10 10 20
/Fr 20 107 df<007FB81280B912C0A26C17803204799641> 0 D<121C127FEAFF80A5EA
7F00121C0909799917> I<EC03FF023F13F09138FC30FCD903C0130FD90F00EB03C0013C
EC00F001701538498148488148488148C7EC038000061601000E17C048EE00E000181760
0038177000301730A20070173800601718A200E0171C48170CA4B912FCA200C0C70030C7
120CA46C171C00601718A20070173800301730A20038177000181760001C17E06CEE01C0
00061780000716036C6CED07006C6C150E6C6C5D01705D013C15F0010FEC03C0D903C001
0FC7FCD900FC13FC91383FFFF0020390C8FC36367BAF41> 8 D<EC03FF023F13F09138FC
00FCD903C0130F010FC7EA03C0013CEC00F0017015384981484881486C151FD80770ED3B
80D806381571D80E1CEDE1C0486C913801C0E0D818079138038060263803809038070070
263001C0010E13306D6C5B0070017049133800606D4913186E5B00E06D4848131C486D48
48130CDA0387C7FCEC01CEEC00FC1578A215FCEC01CEEC038791380703806C90260E01C0
131C0060496C6C13184A13700070496D13380030496D133049487F263803806D1370D818
07C738038060D81C0E913801C0E06C48913800E1C0D80638ED7180D80770153B6C48ED1F
006C48150E6C6C5D01705D013C15F0010FEC03C0D903C0010FC7FCD900FC13FC91383FFF
F0020390C8FC36367BAF41> 10 D<D93F801508D9FFF0151C00037F4813FE487F4814C0
9026C07FE0143C273F000FF01438003CD907FC147848EB01FE6E6C6C13F0007091383FC0
0300F091391FF80FE0486EB5FC030314C06F14806F6C1300EE3FFC0040ED07F036137B9D
41> 24 D<020FB6128091B712C01303010F1680D91FF8C9FCEB7F8001FECAFCEA01F848
5A485A485A5B48CBFCA2123EA25AA2127812F8A25AA87EA21278127CA27EA27EA26C7E7F
6C7E6C7E6C7EEA00FEEB7F80EB1FF86DB71280010316C01300020F1580323279AD41> 26
D<181EA4181F84A285180785727EA2727E727E85197E85F11F80F10FC0F107F0007FBA12
FCBCFCA26C19FCCCEA07F0F10FC0F11F80F13F00197E61614E5A4E5AA24E5A61180F96C7
FCA260181EA4482C7BAA53> 33 D<91381FFFFE91B6FC1303010F14FED91FF0C7FCEB7F
8001FEC8FCEA01F8485A485A485A5B48C9FCA2123EA25AA2127812F8A25AA2B712FE16FF
A216FE00F0C9FCA27EA21278127CA27EA27EA26C7E7F6C7E6C7E6C7EEA00FEEB7F80EB1F
F06DB512FE010314FF1300021F13FE283279AD37> 50 D<EE0180EE03C01607A2EE0F80
A2EE1F00A2163EA25EA25EA24B5AA24B5AA24B5A150F5E4BC7FCA2153EA25DA25DA24A5A
A24A5AA24A5AA24A5AA24AC8FCA2143EA25CA25CA2495AA2495AA2495AA2495AA249C9FC
A2133EA25B13FC5B485AA2485AA2485AA2485AA248CAFCA2123EA25AA25AA25A12602A4E
75BB00> 54 D<126012F0AD12FCA412F0AD126006207BA400> I<ED03FE92381FFF8003
7F13C00203B5FCEC07C091381E003F4A131F14F049481480495A495A49C7EA3F005B133E
49147EA249147C000115FC495C0003EC01E0495C000791C8FC5B120FA2485AA3123F90CA
FCA35AA2127EA312FEA87E161E5E6D14F8127F6D495A4B5A6C6C5C6D495A6C6C49C7FC01
FE133C390FFF80F86CEBFFE06C1480C649C8FCEB3FF02A3D7FBA2C> 67
D<ED03FE92383FFFC092B512E0020314F0EC0FC091381E001F0278130F4A1307494814E0
010315C049481480010FEC0F00161E494890C7FCA3133FA380A280806D7E14FE90380FFF
C06D13FE6D5B01005B15E0D901F8C8FCEB078049C9FC133C5B5B485A1203485A485AA248
CAFC5AA2127EA2163C00FE5D4B5AA26C4A5A4B5A6D5C6D49C7FC6C6C131E01F81378393F
FF03F06CEBFFC06C91C8FC000313FC38007FC02C3D7EBA2C> 69
D<DB01C05F030360030F60A2705F1C1E1C3E031F187E1CFE821B01515A1B07033B170F1B
1FED33F81B3DF37DF8037317F90361EE01F170ED03E3F207C303E1178303C1040F5BDBC0
FEED1F031A3EDA0180EE7C071AF8047FEC01F0DA0300ED03E0A2DF07C05B02066D6CEB0F
80F11F00073E130F4A5E706C5B4E5A4A150371485A0238010F49485C02304B5A7148C7FC
4A0107017E141F6002E0ECF9F84A903803FBF0EFFFE049485D705B010393C8FC91C85A49
5DD8300E1578D87C1E1570D8FFFC0320824992C9EBE180F4F700491AFE755A491AF0D83F
C0F107C0D80F8096C8FC593F7DBA64> 77 D<0370EBFF80912601E00713E0912603C01F
13F891260F007F7F021E9038F03FFE913A7803C00FFF9139F0078003494848486C138090
2603C01E7F902607803EEC7FC049485A011E49143F013E17E0494848141FEBF8035D2601
F007150F00035CEBE00F00075CD9C01EC8FC000F131C49C9FC121FA248CA13C0A348171F
1980127EA2183F00FE1800A2183E187E187C18FC6017016C5F4D5A6017076C6C4B5A4DC7
FC171E6D5D6C6C5D5F6D4A5A6C6CEC03806C6C020FC8FC01FF143E6C01C013F86C9038F8
07E06C90B512806C6C49C9FC011F13F0010313803B3D7BBA42> 79
D<0203B512FE027FECFFF049B712FC010F16FF90273FC3F00080D9780302077F2601E007
1401D803C06F6C7ED80780163F000F171FEA1F00484A140F123E5A0078010F5E12C0C7FC
4B4A5AA296C7FC021F5D183E4B5C187860023F4A5A4D5A92C7000FC8FC173EEE03F84AEB
FFE0DA7E0313804B48C9FC4B7EECFC036F7F6F7F0101147F4A80163F707E495A707EA249
481307830403151049486E14F0F101E04A6D6CEB03C0011F933880078070EC0F0049C8EB
C01E716C5A013E92383FF0F0017EEEFFE0017C6F1380496F48C7FC01E0ED07F0443B7FB8
46> 82 D<03FF15F802076DEB01FC4A6D1307023F150FDA7C7F14034A6C6C1301903801
F01F02C016F890C7FC030F15F0F003E07014C0F00780F00F00181C0307147860EF03C04D
5A051EC7FC5F17F0EEF9E0EEFF8094C8FC16FC6F5AA21507151F153F15F3EC03E3EC0783
91381E03FC143C14F0EB01E09038078001EB0F00133C5B13E0EA03C048488048C7FC5A12
3E007E14007013E000FE1603EF87C06CEECF8001C06EB4C7FC4915FC90C86C5A007CED1F
C03E397CB83B> 88 D<D91FC0EC01E0D97FF015F82601FFFCEC03FC486D15FE380F8FFF
D80E036DEB07FFEA1800C76C6CEB007F023F151F6E6C140FA26E6C1407A214076F140614
03A2180C6E7EA21818A202001538183018706F146018E018C01701037E14801703EF0700
A2170E5F173C17385F17F04C5A4C5A5F16074CC7FC161E5E5E16F8ED7FF05E5E5E93C8FC
002014FE00605C4A5A0070EB07F000F0495A6CEB3FC06C495A26FF81FEC9FCEBFFFC6C5B
14E06C5B6C90CAFC6C5AEA01F838447EB837> I<EC01F8140FEC3F80ECFC00495A495A49
5AA2130F5CB3A7131F5C133F49C7FC13FEEA03F8EA7FE048C8FCEA7FE0EA03F8EA00FE13
7F6D7E131F80130FB3A7801307A26D7E6D7E6D7EEC3F80EC0FF814011D537ABD2A> 102
D<12FCEAFFC0EA07F0EA01FCEA007E7F80131F80130FB3A7801307806D7E6D7EEB007EEC
1FF0EC07F8EC1FF0EC7E00495A495A495A5C130F5CB3A7131F5C133F91C7FC137E485AEA
07F0EAFFC000FCC8FC1D537ABD2A> I<126012F0B3B3B3B3A91260045377BD17> 106
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fs cmmi10 10 28
/Fs 28 122 df<1403EC3FF891387FFF80D901E313C014800103133F9138001F80ED0700
92C7FC80A280A2808013018080130080147F81143F8149B47E130790380F8FF0EB3E0F49
6C7E13F83801F003D803E07F1207380FC0011380121FEA3F0014005A127EA212FE5D4813
01A35DA24813035D6C13075D127C4A5A6C91C7FC5C6C133E6C6C5A3807C0F03801FFE0D8
003FC8FC223D7DBB25> 14 D<133F14C0EB07F06D7E801301A26D7EA3147FA36E7EA36E
7EA36E7EA36E7EA36E7EA36E7EA26E7EA214014A7E5C4A7E91381E3F80143C14784A6C7E
1301EB03E049486C7EEB0F80EB1F00496D7E137E5B48486D7E485A485A000F6E7E485A48
5A48C87E12FE167F4816800070151F293B7CB930> 21 D<EB0380D907E01307010FEC0F
80161F5CA2011F143FA24A1400A2013F5CA291C7127EA24914FEA2017E5CA201FE1301A2
495CA200011403A249ECF018A2000314071738EEE030150F00071670031F1360153F6D01
7713E0486C9038E3E1C0903AFF03C1F380903ACFFF00FF00D9C3FC133ED81FC0C9FCA25B
A2123FA290CAFCA25AA2127EA212FEA25AA212702D377EA432> I<027FB512C00103B612
E0130F5B017F15C09026FF81FEC7FC3901FC007E48487F485A497F484880485AA248C7FC
A2127EA2153F00FE92C7FC5AA25D157E5A5DA24A5AA24A5A007C495A5D003C495A003E01
3FC8FC6C137C380F81F83803FFE0C66CC9FC2B257DA32F> 27 D<13F8EA03FC120FEA1F
F8EA3F80EA7E00127C5AA25AA47EA2127C127EEA3F80EA1FF8EA0FFC1203EA00F80E167C
A817> 44 D<121C127FEAFF80A5EA7F00121C0909798817> 58 D<121C127FEAFF80A213
C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A12600A19798817> I<15
0C151E153EA2153C157CA2157815F8A215F01401A215E01403A215C01407A21580140FA2
15005CA2141E143EA2143C147CA2147814F8A25C1301A25C1303A2495AA25C130FA291C7
FC5BA2131E133EA2133C137CA2137813F8A25B1201A25B1203A25B1207A25B120FA290C8
FC5AA2121E123EA2123C127CA2127812F8A25A12601F537BBD2A> 61
D<1760177017F01601A21603A21607160FA24C7EA216331673166316C3A2ED0183A2ED03
03150683150C160115181530A21560A215C014011580DA03007FA202061300140E140C5C
021FB5FC5CA20260C7FC5C83495A8349C8FC1306A25BA25B13385B01F01680487E000716
FFB56C013F13FF5EA2383C7DBB3E> 65 D<0103B77E4916F018FC903B0007F80003FE4B
EB00FFF07F80020FED3FC0181F4B15E0A2141FA25DA2143F19C04B143F1980027F157F19
0092C812FE4D5A4A4A5AEF0FF04AEC1FC005FFC7FC49B612FC5F02FCC7B4FCEF3FC00103
ED0FE0717E5C717E1307844A1401A2130F17035CA2131F4D5A5C4D5A133F4D5A4A4A5A4D
5A017F4BC7FC4C5A91C7EA07FC49EC3FF0B812C094C8FC16F83B397DB83F> I<0103B7FC
4916E018F8903B0007F80007FE4BEB00FFF03F80020FED1FC0180F4B15E0F007F0021F15
03A24B15F81801143F19FC5DA2147FA292C8FCA25C18035CA2130119F84A1507A2130319
F04A150FA2010717E0181F4A16C0A2010FEE3F80A24AED7F00187E011F16FE4D5A4A5D4D
5A013F4B5A4D5A4A4A5A057FC7FC017F15FEEE03FC91C7EA0FF049EC7FC0B8C8FC16FC16
C03E397DB845> 68 D<0103B812F05BA290260007F8C7123F4B1407F003E0020F150118
005DA2141FA25D19C0143FA24B1330A2027F1470190092C7126017E05C16014A495A160F
49B6FCA25F9138FC000F01031407A24A6DC8FCA201075C18034A130660010F160693C7FC
4A150E180C011F161C18184A1538A2013F5E18F04A4A5AA2017F15074D5A91C8123F4991
3803FF80B9FCA295C7FC3C397DB83D> I<0103B5D8F803B512F8495DA290260007F8C738
07F8004B5DA2020F150F615DA2021F151F615DA2023F153F615DA2027F157F96C7FC92C8
FCA24A5D605CA249B7FC60A202FCC7120101031503605CA201071507605CA2010F150F60
5CA2011F151F605CA2013F153F605CA2017F157F95C8FC91C8FC496C4A7EB690B6FCA345
397DB845> 72 D<0103B6FC5B5E90260007FCC8FC5D5D140FA25DA2141FA25DA2143FA2
5DA2147FA292C9FCA25CA25CA21301A25CA21303A25CA2130718404A15C0A2010F150118
804A1403A2011F16005F4A1406170E013F151E171C4A143C177C017F5D160391C7120F49
EC7FF0B8FCA25F32397DB839> 76 D<902603FFF893383FFF80496081D900079438FF80
000206DC01BFC7FCA2020E4C5A1A7E020C1606190CDA1C7E16FE4F5A02181630A2023816
6162023016C1F00181DA703F158395380303F002601506A202E0ED0C076202C015181830
01016D6C140F06605B028015C0A20103923801801FDD03005B140092380FC00649173F4D
91C8FC01065DA2010E4B5B4D137E130C6F6C5A011C17FEDCE1805B011802E3C7FCA20138
02E6130104EC5C1330ED03F8017016034C5C01F05CD807FC4C7EB500E0D9C007B512F016
80150151397CB851> I<902603FFF891381FFFF8496D5CA2D90007030113006FEC007C02
061678DA0EFF157081020C6D1460A2DA1C3F15E0705CEC181F82023815016F6C5C143015
0702706D1303030392C7FC02607FA2DAE0015C701306ECC0008201016E130EEF800C5C16
3F0103EDC01C041F131891C713E0160F49EDF03818300106140717F8010E02031370EFFC
60130CEE01FE011C16E004005B011815FF177F1338600130153FA20170151F95C8FC01F0
81EA07FCB512E01706A245397DB843> I<4BB4FC031F13F09238FE01FC913903F0007EDA
07C0EB1F80DA1F80EB0FC0023EC7EA07E002FCEC03F0495A4948EC01F8495A4948EC00FC
495A013F16FE49C9FC13FE187F485A12035B12075B120F4916FF121FA2485AA34848ED01
FEA448C9EA03FCA3EF07F8A218F0170F18E0171F18C0EF3F807EEF7F0017FEDA07C05B6C
90391FF001F8903980383803001F496C485A9139E00C0FE0260FC0C0EB1F80D807E1D90E
3FC7FC0280137ED803F1EB07F8D801F95C3A007FC00FC0903A3FE07F0003903807FFFE01
00018F5BDA000F1306170E171E705A177CEEC1F816FF5FA25F5F6F5B6F48C7FCED00F838
4B7CBA42> 81 D<0103B612F849EDFF8018E0903B0007F8001FF84BEB03FCEF00FE020F
157FA24BEC3F80A2021F16C0A25DA2143FF07F805DA2027FEDFF006092C7485A4D5A4A4A
5A4D5A4AEC1F80057FC7FC0101EC07F891B612E094C8FC9139FC000FC00103EC03F0707E
4A6D7E831307177E5C177F010F5D5F5CA2011F1401A25CA2133F16034A4A1360A2017F17
E019C091C71401496C01011480B61503933900FE0700EF7E0ECAEA1FFCEF07F03B3B7DB8
3F> I<92391FE00380DBFFFC130002036D5A91390FE01F8F91393F0007DF027EEB01FE02
F81300495A4948147E177C4948143C495AA2011F153891C8FCA3491530A28094C7FC8080
6D7E14FEECFFE06D13FE6DEBFFC06D14F06D806D80021F7F02037FEC003F03037F150016
7F163F161FA3120C160FA2001C151F94C7FCA3003C153EA25E003E5D127E007F4A5A6D49
5A6DEB0FC0D8F9F0495AD8F0FE01FEC8FC39E03FFFF8010F13E0D8C00190C9FC313D7CBA
33> I<277FFFFC01B500F890B51280B5FC60000390C7D807FCC7380FF80001FC4BEC03E0
00016204035E98C7FC621A0604075DA2040F5DA2041B5D6216336D02735D1663000003C3
4A5A83DB01834AC8FC04815CDB0301140603075D1506030C5DA203185D19700330156061
15606D01E04A5A15C090267F01804AC9FC17FEDA030014060400130E0206150C020E5D14
0C4A5DA24A5D18E04A5D715A5C4A92CAFCA26DC85AA2013E157C1778133C177013380130
1560513B7CB84E> 87 D<49B500F890387FFFF095B5FC1AE0D90003018090380FFC004B
C713E00201ED07804EC7FC6E6C140E606F5C705B606F6C485A4D5A031F91C8FCEEE0065F
6F6C5A5F03075B705A16F96FB45A94C9FC6F5AA36F7EA34B7FED037F9238063FC0150E4B
6C7E1538ED700F03E07F15C04A486C7EEC0300020613034A805C4A6D7E14704A13004948
80495A49C86C7E130E011E153F017E4B7ED803FF4B7E007F01E0011FEBFFC0B5FC614439
7EB845> I<B500FC91383FFFE0A3000390C83807FC006CEE03E06C5F4D5A95C7FC6D6C14
0E5F5F6D6C14305F5F6D6C495A4CC8FC010F5C6E130E160C01075C6E5B5E6D6C5B15014B
5AD901FE90C9FC15065D6D6C5A5D15706E5A5D5D6ECAFC5CA3147E14FEA35C1301A35C13
03A35C1307A2130F000FB512F0A25D3B397DB830> I<91B712FCA25B9239E00007F84AC7
EA0FF0D903F8EC1FE04AEC3FC04AEC7F804A150049485C91C7485A4C5A010E4A5A4C5A01
0C4A5A011C4A5A01185D167F4CC7FC90C7485A4B5A4B5A4B5A5E151F4B5A4B5A4BC8FC4A
5A4A5A4A5A5D140F4A5A4A5A4A48130C4AC7FC495A4A141C01031518495A494814384948
143049481470495A49C812F0495D000115014848140348484A5A4848140F4848141F4848
EC7F804848EB07FF90B7FCB8FC94C7FC36397BB839> I<14E0EB03F8A21307A314F0EB01
C090C7FCAB13F8EA03FEEA070F000E1380121C121812381230EA701F1260133F00E01300
12C05BEA007EA213FE5B1201A25B12035BA20007131813E01438000F133013C01470EB80
6014E014C01381EB838038078700EA03FEEA00F815397EB71D> 105
D<EB03F0EA01FFA3EA00075CA3130F5CA3131F5CA3133F91C8FCA35B017EEB07C0ED1FF0
ED783801FEEBE0F89039FC01C1FCEC0383EC07070001130ED9F81C13F891383803F09138
7001E0000349C7FCEBF1C0EBF38001F7C8FCEA07FEA2EBFFE0EBE7F8380FE0FEEBC07F6E
7E141F001F80D9800F1330A21670003F011F136001001380A216E04815C0007E1481020F
1380158300FE903807870048EB03FE0038EB00F8263B7CB92B> 107
D<01F816F0D803FE9138E001F8D8070F903801F003000ED9800314FC121C121800380207
13010030EDE000D8701F167C1260030F143CD8E03F163800C001005B5BD8007E131F1830
01FE5C5B033F1470000117604991C7FCA218E000034A14C049137E17011880170318005F
03FE1306170E000101015C01F801BF5B3B00FC039F8070903A7E0F0FC0E0903A1FFC03FF
C0902703F0007FC7FC36267EA43B> 119 D<903907E001F090391FF807FC9039783E0E0F
9039E01F1C1FD801C09038383F803A03800FF07F0100EBE0FF5A000E4A1300000C157E02
1F133C001C4AC7FC1218A2C7123FA292C8FCA25CA2147EA214FEA24A130CA20101141C00
1E1518003F5BD87F81143801835C00FF1560010714E03AFE0E7C01C0D87C1C495A277838
3E0FC7FC391FF00FFC3907C003F029267EA42F> I<13F8D803FE1470D8070F14F8000EEB
8001121C121800381403003015F0EA701F1260013F130700E0010013E012C05BD8007E13
0F16C013FE5B151F000115805BA2153F000315005BA25D157EA315FE5D14010001130338
00F80790387C1FF8EB3FF9EB0FE1EB00035DA2000E1307D83F805B007F495AA24A5A92C7
FCEB003E007C5B00705B6C485A381E07C06CB4C8FCEA01FC25367EA429> I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ft cmr10 10 74
/Ft 74 123 df<1506150FA24B7EA24B7EA24B7EA2EDDFF0A29138018FF8A291380307FC
A291380603FEA291380E01FF140CDA1C007F141802386D7E143002706D7E146002E06D7E
5C01016E7E5C01036E7E91C7FC496E7E1306010E6E7E130C011C6E7F131801386F7E1330
01706F7E136001E06F7E5B170F484882170748C97F17030006831701488383481880001F
B9FC4818C0A24818E0A2BA12F0A23C3C7CBB45> 1 D<B812FEA3D87FE0C7121F16016C6C
EC007F6C6C151FA26C6C816C6C81A26C6C816C7F7E6E15806D6C14016D7EA26D7E6D6C91
C7FCA26D7E6D7EA26D7F6D7FA26E7E143FA26E5A6E5A6EC9FC140E5C5C14300270EC0180
5C495A495A49C81203010E16005B5B495D5B48485D48485D90C95A485E000E4B5A48ED1F
FE003FB7FC5AB8FCA231397BB83C> 6 D<011FB512FEA39026001FFEC8FCEC07F8A8EC3F
FE0103B512E0D91FF713FC90397F07F87F01FCEC1F80D803F8EC0FE0D807F06E7ED80FE0
6E7E001F82D83FC06E7EA2007F8201808000FF1780A7007F170001C05C003F5EA2D81FE0
4A5A000F5ED807F04A5AD803F84A5AD800FCEC1F80017F027FC7FC90391FF7FFFC0103B5
12E09026003FFEC8FCEC07F8A8EC1FFE011FB512FEA331397BB83C> 8
D<010FB612C0A3D900070180C7FCDA01FEC8FCA7D8FF80ED07FC01E0151F001F17E001F0
153F000F17C001F8157F00071780ACD803FCEDFF00A4D801FE4A5AA200005E017F4A5A02
811307013F5DD91FC1495AD90FE1495AD903F9017FC7FC0100B512FC023F13F0020390C8
FC6E5AA8913807FF80010FB612C0A336397BB841> I<DA0FF813FC91397FFF07FF903B01
F807DF83C0903A07E001FF0F903B1F8007FE1FE090393F000FFC137E16F85B9338F00780
4848010790C7FC1503ACB812F8A32801F80003F0C7FCB3AB486C497E267FFFE0B512F0A3
333B7FBA30> 11 D<EC0FF8EC7FFE903901F80780903907E001C090391F8000E090383F
0007017E497EA25BA2485A6F5AED018092C8FCA9ED03F0B7FCA33901F8000F1503B3AA48
6C497E267FFFE0B512C0A32A3B7FBA2E> I<DA0FF0EB1FF0DA7FFEEBFFFC903B01F80F83
F00F903C07E001CFC00380903C1F8000FF0001C090273F0007FE130F017E4948497EA249
5CA248485C03076E5A03030203C7FC95C8FCA9F007E0BAFCA33C01F80003F0001F1807B3
AA486C496C497E267FFFE0B500C1B51280A3413B7FBA45> 14 D<6C130800E0133800F8
13F8383E03E0381F07C0380FDF803803FE006C5A6C5A1320150A76B42A> 20
D<121C127FEAFF80A8EA7F00AB123EAB121CABC7FCA8121C127FEAFF80A5EA7F00121C09
3C79BB17> 33 D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A
1206120E5A5A5A12600A1979B917> 39 D<146014E0EB01C0EB0380EB0700130E131E5B
5BA25B485AA2485AA212075B120F90C7FCA25A121EA2123EA35AA65AB2127CA67EA3121E
A2121F7EA27F12077F1203A26C7EA26C7E1378A27F7F130E7FEB0380EB01C0EB00E01460
135278BD20> I<12C07E12707E7E7E120F6C7E6C7EA26C7E6C7EA21378A2137C133C133E
131EA2131F7FA21480A3EB07C0A6EB03E0B2EB07C0A6EB0F80A31400A25B131EA2133E13
3C137C1378A25BA2485A485AA2485A48C7FC120E5A5A5A5A5A13527CBD20> I<15301578
B3A6007FB812F8B912FCA26C17F8C80078C8FCB3A6153036367BAF41> 43
D<121C127FEAFF80A213C0A3127F121C1200A412011380A2120313005A1206120E5A5A5A
12600A19798817> I<B512FCA516057F941C> I<121C127FEAFF80A5EA7F00121C090979
8817> I<EB03F8EB1FFF90387E0FC09038F803E03901E000F0484813780007147C48487F
A248C77EA2481580A3007EEC0FC0A600FE15E0B3007E15C0A4007F141F6C1580A36C1500
6D5B000F143EA26C6C5B6C6C5B6C6C485A6C6C485A90387E0FC0D91FFFC7FCEB03F8233A
7DB72A> 48 D<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A3
1C3879B72A> I<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E
123000706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D
140F4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B491303484814
00485A485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A> I<EB07F8EB3FFF4913C0
3901F80FF03903C007F848486C7E380E0001000F80381FE0006D7FA56C5A6C5AC85A1401
A25D4A5AA24A5A5DEC0F80027EC7FCEB1FFCECFF809038000FE06E7EEC01FC816E7EED7F
80A216C0A2153F16E0A2121EEA7F80487EA416C049137F007F1580007EC7FC0070ECFF00
6C495A121E390F8003F83907F00FF00001B512C06C6C90C7FCEB0FF8233A7DB72A> I<15
38A2157815F8A2140114031407A2140F141F141B14331473146314C313011483EB030313
071306130C131C131813301370136013C01201EA038013005A120E120C5A123812305A12
E0B712F8A3C73803F800AB4A7E0103B512F8A325397EB82A> I<0006140CD80780133C90
38F003F890B5FC5D5D158092C7FC14FC38067FE090C9FCABEB07F8EB3FFE9038780F8039
07E007E090388003F0496C7E12066E7EC87EA28181A21680A4123E127F487EA490C71300
485C12E000605C12700030495A00385C6C1303001E495A6C6C485A3907E03F800001B5C7
FC38007FFCEB1FE0213A7CB72A> I<EC3FC0903801FFF0010713FC90380FE03E90383F80
0790387E001F49EB3F804848137F485AA2485A000FEC3F0049131E001F91C7FCA2485AA3
127F90C9FCEB01FC903807FF8039FF1E07E090383801F0496C7E01607F01E0137E497FA2
49148016C0151FA290C713E0A57EA56C7E16C0A2121FED3F807F000F15006C6C5B15FE6C
6C5B6C6C485A3900FE07F090383FFFC06D90C7FCEB03FC233A7DB72A> I<12301238123E
003FB612E0A316C05A168016000070C712060060140E5D151800E01438485C5D5DC71201
4A5A92C7FC5C140E140C141C5CA25CA214F0495AA21303A25C1307A2130FA3495AA3133F
A5137FA96DC8FC131E233B7BB82A> I<EB03F8EB1FFF017F13C09038FC07F03901E001F8
48486C7E4848137C90C77E48141E000E141F001E80A3121FA27F5D01E0131E6C6C133E01
FC133C6D5B6C6C6C5AECC1E06CEBF3C06C01FFC7FC6C5BEB3FFF6D13C081017F13F801F0
7F3903E07FFE3907801FFF48486C1380481303003E6D13C0003CEB007F007C143F0078EC
0FE000F814075A1503A21501A36C15C012781503007C15806CEC07006C5C6C6C131ED807
E0137C3903F803F0C6B55A013F1380D907FCC7FC233A7DB72A> I<121C127FEAFF80A5EA
7F00121CC7FCB2121C127FEAFF80A5EA7F00121C092479A317> 58
D<007FB812F8B912FCA26C17F8CCFCAE007FB812F8B912FCA26C17F836167B9F41> 61
D<1538A3157CA315FEA34A7EA34A6C7EA202077FEC063FA2020E7FEC0C1FA2021C7FEC18
0FA202387FEC3007A202707FEC6003A202C07F1501A2D901807F81A249C77F167FA20106
810107B6FCA24981010CC7121FA2496E7EA3496E7EA3496E7EA213E0707E1201486C81D8
0FFC02071380B56C90B512FEA3373C7DBB3E> 65 D<B712E016FC16FF0001903980007F
C06C90C7EA1FE0707E707E707EA2707EA283A75F16035F4C5A4C5A4C5A4C5AEEFF8091B5
00FCC7FCA291C7EA7F80EE1FE0EE07F0707E707E83707EA21880177F18C0A7188017FFA2
4C13005F16034C5AEE1FF8486DEB7FF0B812C094C7FC16F832397DB83B> I<913A01FF80
0180020FEBE003027F13F8903A01FF807E07903A03FC000F0FD90FF0EB039F4948EB01DF
D93F80EB00FF49C8127F01FE153F12014848151F4848150FA248481507A2485A1703123F
5B007F1601A35B00FF93C7FCAD127F6DED0180A3123F7F001F160318006C7E5F6C7E1706
6C6C150E6C6C5D00001618017F15386D6C5CD91FE05C6D6CEB03C0D903FCEB0F80902701
FF803FC7FC9039007FFFFC020F13F002011380313D7BBA3C> I<B712C016F816FE000190
398001FF806C90C7EA3FE0EE0FF0EE03F8707E707E177FA2EF3F8018C0171F18E0170F18
F0A3EF07F8A418FCAC18F8A4EF0FF0A218E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C5A
EE0FF0EE3FE0486DEBFF80B8C7FC16F816C036397DB83F> I<B812FCA30001903880000F
6C90C71201EE007E173E171E170EA31706A317078316C0A394C7FCA31501A21503150F91
B5FCA3EC000F15031501A21500A21860A318E093C712C0A41701A3EF0380A21707A2170F
173F177F486D903807FF00B9FCA333397DB839> I<B812F8A30001903880001F6C90C712
01EE00FC177C173C171CA2170CA4170E1706A2ED0180A21700A41503A21507151F91B5FC
A3EC001F15071503A21501A692C8FCAD4813C0B612C0A32F397DB836> I<B648B512FEA3
0001902680000313006C90C76C5AB3A491B6FCA391C71201B3A6486D497EB648B512FEA3
37397DB83E> 72 D<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E> I<B6
12E0A3000101C0C8FC6C90C9FCB3AD1718A517381730A31770A317F0A216011603160FEE
1FE0486D13FFB8FCA32D397DB834> 76 D<B5933807FFF86E5DA20001F0FC002600DFC0
ED1BF8A2D9CFE01533A3D9C7F01563A3D9C3F815C3A2D9C1FCEC0183A3D9C0FEEC0303A2
027F1406A36E6C130CA36E6C1318A26E6C1330A36E6C1360A26E6C13C0A3913901FC0180
A3913900FE0300A2ED7F06A3ED3F8CA2ED1FD8A3ED0FF0A3486C6D5A487ED80FFC6D4849
7EB500C00203B512F8A2ED018045397DB84C> I<B5913807FFFE8080C69238007FE06EEC
1F80D9DFF0EC0F001706EBCFF8EBC7FCA2EBC3FEEBC1FFA201C07F6E7EA26E7E6E7E8114
0F6E7E8114036E7E168080ED7FC016E0153FED1FF0ED0FF8A2ED07FCED03FEA2ED01FF6F
1386A2EE7FC6EE3FE6A2EE1FF6EE0FFEA216071603A216011600A2177E486C153E487ED8
0FFC151EB500C0140EA2170637397DB83E> I<EC03FF021F13E09138FE01FC903901F800
7ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E49157E0003167F
4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8491507A300FF17FC
AC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717806D157F00031700
6C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F8017FC7FC9039
00FE01FC91381FFFE0020390C8FC363D7BBA41> I<B712C016F816FE000190398001FF80
6C90C7EA3FC0EE0FE0EE07F0EE03F817FC17FE1601A217FFA717FEA2EE03FCA2EE07F817
F0EE0FE0EE3FC0923801FF0091B512FC16F091C9FCB3A5487FB6FCA330397DB839> I<B6
12FEEDFFE016F8000190388007FE6C90C76C7EEE3FC0707E707E707EA2707EA283A65FA2
4C5AA24C5A4C5AEE3F8004FFC8FCED07FC91B512E05E9138000FF0ED03F8ED00FE82707E
707EA2161F83A583A6F00180A217F8160F1803486D01071400B66D6C5A04011306933800
FE0ECAEA3FFCEF07F0393B7DB83D> 82 D<D90FF813C090383FFE0190B512813903F807
E33907E000F74848137F4848133F48C7121F003E140F007E1407A2007C140312FC1501A3
6C1400A37E6D14006C7E7F13F86CB47E6C13F8ECFF806C14E06C14F86C14FEC680013F14
80010714C0EB007F020713E0EC007FED3FF0151F150FED07F8A200C01403A21501A37EA2
16F07E15036C15E06C14076C15C06C140F6DEB1F80D8FBF0EB3F00D8F0FE13FE39E03FFF
F8010F13E0D8C00190C7FC253D7CBA2E> I<003FB812E0A3D9C003EB001F273E0001FE13
0348EE01F00078160000701770A300601730A400E01738481718A4C71600B3B0913807FF
80011FB612E0A335397DB83C> I<B6903807FFFEA3000101809038007FE06C90C8EA1F80
EF0F001706B3B2170E6D150C80171C133F17186D6C14385F6D6C14F06D6C5C6D6C495A6D
6CEB07806D6C49C7FC91387F807E91381FFFF8020713E09138007F80373B7DB83E> I<B5
D8FC07B5D8F001B5FCA30007902780001FFEC7EA1FF86C48C7D80FF8EC07E000010307ED
03C01B807F6C6F6C1500A26E5F017F6E6C1406A280013F4A6C5CA280011F4A6D5BEE067F
A26D6C010E6D5BEE0C3FA26D6C011C6D5BEE181FA26D6C6F5BEE300FA26D6C6F485AEE60
07A26D6C4CC7FC9338C003FCA203805D913B7F818001FE06A203C1150EDA3FC3C7EAFF0C
A203E3151CDA1FE6EC7F98A215F6DA0FFCEC3FF0A302075E4B141FA202035E4B140FA202
015E4B1407A2020093C8FC4B80503B7EB855> 87 D<B500FE91383FFFE0A3000301E091
3807FE00C649EC03F0017F6F5A606D6C5D6D6C140395C7FC6D6C1406A26D6C5C6D6C141C
17186D6C143817306D6D5B6E6C13E05F91383FE0015F91381FF003DA0FF890C8FC160691
3807FC0E160C913803FE1C913801FF185E6E13B016E0157F6F5AB3A24B7E023FB512C0A3
3B397FB83E> 89 D<EAFFF8A4EAF000B3B3B3B3A3EAFFF8A40D5378BD17> 91
D<EAFFF8A4EA0078B3B3B3B3A3EAFFF8A40D537FBD17> 93 D<EB1FE0EBFFFC3803E03F
3907000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0
EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C9039
80063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A> 97
D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F809039F7000FC001
FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16FEA216FC15016D14
F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E903800FFF8C7EA1FC028
3B7EB92E> I<EB03FC90381FFF8090387E03E03901F80070484813F83907E001FC380FC0
03A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F14
0E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277D
A525> I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0
007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C
131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813
C0283B7DB92E> I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380F
C0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14
037F001F14076C6C13060007140E6D131CD801F013386C6C137090387E03E090381FFF80
903803FC0020277EA525> I<147E903803FF8090380FC1E0EB1F8790383F0FF0137EA213
FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8A31C3B7FBA19> I<
ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE03903E007C03A07C003E0
10000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A6D48C7FC38073FFC38
060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF804815C03A0F80007FE048
C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03E0003F1407D80F80EB
0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA52A> I<EA03F012FFA3
120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039F3800FC0EBF70013FE496D7EA25B
A35BB3A3486C497EB500C1B51280A3293A7EB92E> I<EA0380EA0FE0487EA56C5AEA0380
C8FCAAEA03F012FFA312071203B3AA487EB512C0A312387EB717> I<EB01C0EB07F0EB0F
F8A5EB07F0EB01C090C7FCAAEB01F813FFA313071301B3B3A2123C127E00FF13F01303A2
14E038FE07C0127C383C0F00EA0FFEEA03F8154984B719> I<EA03F012FFA3120F1203B1
913801FFFCA39138007FC01600157C15705D4A5A4A5A4AC7FC141E1438147814FC13F1EB
F3FEEBF73F01FE7FEBF81F496C7E8114076E7E6E7E811400157E157F811680ED1FC0486C
EB3FF0B500C0B5FCA3283A7EB92C> I<EA03F012FFA3120F1203B3B3AD487EB512C0A312
3A7EB917> I<2703F00FF0EB1FE000FFD93FFCEB7FF8913AF03F01E07E903BF1C01F8380
3F3D0FF3800FC7001F802603F70013CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A348
6C496CEB1FE0B500C1B50083B5FCA340257EA445> I<3903F00FF000FFEB3FFCECF03F90
39F1C01F803A0FF3800FC03803F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280
A329257EA42E> I<EB03FE90380FFF8090383E03E09038F800F84848137C48487F48487F
4848EB0F80001F15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14
076C15E0A26C6CEB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F890387E03F090
381FFFC0D903FEC7FC25277EA52A> I<3903F01FE000FFEB7FF89038F1E07E9039F3801F
803A0FF7000FC0D803FEEB07E049EB03F04914F849130116FC150016FEA3167FAA16FEA3
ED01FCA26DEB03F816F06D13076DEB0FE001F614C09039F7803F009038F1E07E9038F0FF
F8EC1FC091C8FCAB487EB512C0A328357EA42E> I<D903F813C090381FFE0190387E0781
9038FC01C33903F000E3000714774848133749133F001F141F485A150F48C7FCA312FEAA
127FA37E6D131F121F6D133F120F6C6C137F6C6C13EF3901F801CF39007E078F90381FFE
0FEB07F890C7FCABED1FE00203B5FCA328357DA42C> I<3807E01F00FFEB7FC09038E1E3
E09038E387F0380FE707EA03E613EE9038EC03E09038FC0080491300A45BB3A2487EB512
F0A31C257EA421> I<EBFF03000313E7380F80FF381E003F487F487F00707F12F0A2807E
A27EB490C7FCEA7FE013FF6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB
0FC01407A26C1303A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A27
7DA521> I<1318A51338A31378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215
C0A93800FC011580EB7C03017E13006D5AEB0FFEEB01F81A347FB220> I<D803F0EB07E0
00FFEB01FFA3000FEB001F00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7
FF8090383F03C790381FFF87903A03FC07E00029267EA42E> I<B538803FFEA33A0FF800
0FF06C48EB07E00003EC03C06D148000011500A26C6C1306A26D130E017E130CA26D5BA2
EC8038011F1330A26D6C5AA214E001075BA2903803F180A3D901FBC7FCA214FF6D5AA214
7CA31438A227257EA32C> I<B53A1FFFE03FFEA3260FF8009038000FF86C48017EEB03E0
18C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E9038EFC00C15C7A2
D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC6001360A2D907E66D
5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A130E0260130C37
257EA33C> I<B538807FFFA33A03FE003FF00001EC1F80000092C7FC017E131C6D13186D
6C5AECC070010F5B6D6C5AECF180EB03FB6DB4C8FC6D5AA2147F804A7E8114CF903801C7
E090380383F090380703F8EB0601496C7E011C137E49137F01787F496D7E486C80000FEC
3FF0D8FFFE90B51280A329247FA32C> I<B538803FFEA33A0FF8000FF06C48EB07C00003
EC03806C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C
5AA214F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA
7C0100FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C> I<003FB5
12FCA2EB8003D83E0013F8003CEB07F00038EB0FE012300070EB1FC0EC3F800060137F15
0014FE495AA2C6485A495AA2495A495A495AA290387F000613FEA2485A485A0007140E5B
4848130C4848131CA24848133C48C7127C48EB03FC90B5FCA21F247EA325> I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fu cmcsc10 10 21
/Fu 21 122 df<150EA3151FA24B7EA34B7EA3EDDFE0A202017F158FA29138030FF81507
A202067F1503020E7FEC0C01A2021C7FEC1800A24A80167FA24A6D7EA202E0804A131FA2
494880160FA249B67EA249810106C71203A249811601A2498182A2496F7EA20170820160
153F13E06D821203D80FFCED7FF8B56C010FB512E0A33B3C7CBB44> 65
D<B712F816FF17C00001903980001FF06C90C7EA07FC707E707E701380177F18C0173F18
E0A618C0A2177F1880EFFF004C5A4C5AEE0FF8EE3FE091B6128094C7FC91C7EA3FE0EE07
F8EE01FE707EEF7F80EF3FC018E0171F18F0170F18F8A718F0171F18E0173FEF7FC0EFFF
804C1300EE07FE486DEB1FFCB812F017C04CC7FC35397CB840> I<B5933801FFFE6E5DA2
000119002600DFC0ED06FEA2D9CFE0150CA3D9C7F01518A2D9C3F81530A3D9C1FC1560A2
D9C0FE15C0A3027FEC0180A26E6CEB0300A36E6C1306A26E6C5BA26E6C5BA36E6C5BA26E
6C5BA36E6C5BA292387F0180A3DB3F83C7FCA2ED1FC6A3ED0FECA2ED07F8A3486C6D5A48
7ED80FFC6D48497EB500C092B512FEA26F5A47397BB852> 77 D<B7FC16F016FE000190
398001FF806C90C7EA3FE0EE0FF0707E707E707EA2838284A695C7FC5E5F5F1603EE07F0
4C5AEE3F80DB01FEC8FC91B512F816E091380003FCED00FEEE7F80707E707E707EA21607
83A583A61930A28316031970486D6D6C1360B66D14E094387F81C094383FC380CA380FFF
00EF01FC3C3B7CB842> 82 D<B500FE91380FFFF8A3000301C0020113806C90C9EA7E00
6C173C6E1538017F1630A26E1570013F166080011F5EA26E1401010F5E8001074BC7FCA2
6E5C010315068001015DA26D6C5CA281027F5CA26E6C5BA281021F5C81020F495AA215F8
020749C8FC15FC02031306A2EDFE0E0201130C15FF6E5BA216B8ED7FB016F06F5AA36F5A
A26F5AA36FC9FCA23D3B7DB844> 86 D<1407A24A7EA34A7EA3EC37E0A2EC77F01463A2
ECC1F8A201017F1480A2903803007EA301067FA2010E80010C131FA2496D7EA2013FB57E
A29038300007496D7EA3496D7EA200018149130012036D801207D81FE0903801FF80D8FF
F8010F13F8A22D2C7DAB33> 97 D<B612F015FE3A07F8003F806C48EB0FC0ED07E0ED03
F016F8150116FCA516F8A2ED03F01507ED0FE0ED3F80913801FF0090B512F815FF9039F0
001FC0ED07E0ED03F0ED01F816FC150016FEA616FC1501A2ED03F8ED07F0ED0FE0486CEB
3FC0B7120015F8272B7CAA30> I<91383FC006903901FFF80E90390FE03E1E90381F0007
017EEB03BE01F8EB01FE484813004848147E0007153E485A001F151E5B003F150E90C8FC
5A1606A212FE1600AA007F1506A37E6D140E001F150C7F000F151C6C6C1418000315386C
6C14706C6C14E0017EEB01C0011FEB078090390FE03E00903801FFF89038003FC0272D7B
AB31> I<B612F015FE3907F8007F6C48EB0FC0ED03E06F7E6F7E167C167E82A2EE1F80A2
17C0160FA317E0AA17C0A3EE1F80A217005E163E5E16FC4B5A4B5AED0FC0486CEB7F80B6
00FEC7FC15F02B2B7CAA34> I<B712E0A23907F8000F6C481303ED00F01670A21630A416
18A215C01600A31401A2140790B5FCA2EBF0071401A21400A21606A21500A2160CA4161C
A2163C167C16F8486C1307B7FCA2272B7CAA2E> I<B712C0A23907F8001F6C481303ED01
E01500A21660A41630A215C01600A31401A2140790B5FCA2EBF0071401A21400A492C7FC
AB487EB512E0A2242B7CAA2C> I<91383FE003903901FFF807903907E01E0F90391F0007
8F017EEB01DF496DB4FC484880484880484880485A001F815B003F8190C8FC5A82A212FE
93C7FCA892383FFFF8A2007F02001380EE3F00A27E7F121F7F120F6C7E6C7E6C6C5C6C7E
017E5C011FEB01CF903907E00F87903901FFFE039026003FF0C7FC2D2D7BAB35> I<B539
C07FFFE0A23B07F80003FC006C486D5AB190B6FCA29038F00001B2486C497EB539C07FFF
E0A22B2B7CAA33> I<B512C0A23807F8006C5AB3B3487EB512C0A2122B7CAA19> I<B512
E0A2D807F8C8FC6C5AB3A61660A416C0A31501A21503A21507ED1F80486C13FFB7FCA223
2B7CAA2B> 108 D<D8FFF0903807FFE07F0007020013006C6C143C7F017F14187F806D7E
130F806D7E6D7EA26D7E6D7E147E147FEC3F80141F15C0EC0FE0EC07F0140315F8EC01FC
140015FE157FED3F98151F16D8ED0FF81507A215031501A2486C13001678D81FE01438EA
FFFC16182B2B7CAA33> 110 D<B612E015FC3907F800FE6C48EB1F80ED0FC0ED07E016F0
1503A216F8A516F0A2150716E0ED0FC0ED1F80EDFE0090B55A15E001F0C8FCB1487EB512
C0A2252B7CAA2E> 112 D<B67E15F03907F800FE6C48133FED0FC06F7EA26F7E82A65E4B
5AA24B5A033FC7FC15FE90B512F05D9038F001F8EC007E816F7EA26F7EA582A4171816F0
15071738486C903803F830B5D8C00113709238007FE0C9EA1F802D2C7CAA32> 114
D<017F13603901FFE0E0380780F9380E001F48130748130312780070130100F01300A315
607EA26C14007E127F13C0EA3FFEEBFFE06C13F8000713FE6C7FC61480010F13C01300EC
0FE01407EC03F01401A212C01400A37E15E06C1301A26CEB03C06CEB0780B4EB0F0038F3
E01E38E0FFF838C01FE01C2D7BAB26> I<3B7FFF800FFFC0A2000790390003FE006C48EB
01F800015D000015C0017F13036D5C6E48C7FC90381FC0066D6C5A151C6D6C5A903803F8
3001015BECFCE06D6C5AEC7F80A2143F6E7E140F4A7E4A7E1433EC63F8ECE1FCECC0FE90
3801807E0103137F49486C7E0106131F4980011C6D7E496D7E0130130301708001F06D7E
000181000781D81FF8491380B46C4913F8A22D2B7DAA33> 120 D<B56CEB1FFEA2D80FFC
C7EA0FF00003ED07C01780000116006C6C1406017F140E160C6D6C5B6D6C133816306D6C
5B6D6C13E05E6D6C485A903801FC0393C7FC903800FE06EC7F0E150CEC3F9CEC1FF85D14
0F6E5AAF4A7E49B57EA22F2B7EAA33> I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop Fu 924 450 a(Appendix) p Ft 32 w(A.) p Fu 41
w(Appendix) 32 b(by) f(Michel) h(V) -10 b(an) 31 b(den) g(Ber) n(gh) p
Ft 555 600 a(In) 21 b(this) h(app) r(endix) f(w) n(e) f(giv) n(e) g
(alternativ) n(e) g(pro) r(ofs) g(of) h(Theorems) f(1.3) g(and) h(1.4.)
34 b(Our) 20 b(pro) r(of) h(of) 456 699 y(Theorem) g(1.4) h(do) r(es) g
(not) g(rely) g(on) 1532 678 y(\024) 1523 699 y(Cec) n(h) g(cohomology)
-7 b(.) 33 b(F) -7 b(urthermore) 21 b(our) h(pro) r(of) g(of) g
(Theorem) 456 799 y(1.3) 30 b(do) r(es) h(not) h(rely) e(on) h(the) h
(prop) r(erties) f(of) g(w) n(eigh) n(ted) g(pro) 5 b(jectiv) n(e) 30
b(spaces) g(with) p Fs 32 w(w) p Fr 32 w(6) p Ft(=) f(\(1) p
Fs(;) p Ft 14 w(1\).) 456 898 y(So) e(it) h(is) f(in) h(fact) g(indep) r
(enden) n(t) g(of) g(Theorem) f(1.4!) 555 998 y(After) 36
b(the) f(authors) f(of) h(this) g(pap) r(er) f(had) h(prop) r(osed) f
(me) h(to) g(write) g(this) g(app) r(endix) g(they) 456
1098 y(succeeded) c(in) i(simplifying) f(some) f(of) h(m) n(y) g
(original) e(argumen) n(ts) h(and) h(they) g(ha) n(v) n(e) f
(gracefully) 456 1197 y(allo) n(w) n(ed) i(me) i(to) f(consult) h(some)
f(of) g(their) h(priv) -5 b(ate) 34 b(notes) h(whic) n(h) f(con) n
(tained) g(similar) g(ideas.) 456 1297 y(These) 27 b(con) n(tributions)
g(ha) n(v) n(e) f(allo) n(w) n(ed) g(me) i(to) f(streamline) g(the) h
(presen) n(tation) f(b) r(elo) n(w.) 555 1397 y(The) g(main) g(idea) f
(b) r(ehind) i(the) f(new) g(pro) r(ofs) f(is) h(that) g(while) g(the) g
(map) f(\(a) h(priori) f(dep) r(enden) n(t) 456 1496
y(on) p Fs 27 w(w) p Ft 2 w(\)) j(whic) n(h) e(asso) r(ciates) f
(linear) h(data) g(to) h(ideals) f(seems) g(hard) g(to) h(understand,) f
(the) h(in) n(v) n(erse) 456 1596 y(of) 33 b(that) h(map) f(is) g(giv) n
(en) g(b) n(y) g(a) g(simple) h(form) n(ula) e(\(see) i(\(A.5\)) g(b) r
(elo) n(w\)) f(whose) g(prop) r(erties) f(are) 456 1695
y(transparen) n(t.) 555 1795 y(W) -7 b(e) 36 b(start) g(with) g(the) g
(pro) r(of) g(of) g(Theorem) f(1.4.) 60 b(First) 36 b(w) n(e) g(in) n
(tro) r(duce) f(some) g(notational) 456 1895 y(con) n(v) n(en) n
(tions.) f(If) p Fs 28 w(Q) p Ft 26 w(is) 27 b(a) f(quiv) n(er) g(with)
i(relations) d(then) i(w) n(e) g(will) g(iden) n(tify) p
Fs 27 w(Q) p Ft 27 w(with) g(a) p Fq 27 w(C) p Ft 15
w(-linear) 456 1994 y(additiv) n(e) 33 b(category) f(whose) h(ob) 5
b(jects) 33 b(are) g(the) h(\014nite) g(direct) g(sums) f(of) h(v) n
(ertices) f(of) p Fs 33 w(Q) p Ft(.) 56 b(This) 456 2094
y(has) 23 b(the) i(e\013ect) g(that) g(w) n(e) f(write) g(paths) g
(from) g(righ) n(t) f(to) i(left.) 36 b(Under) 24 b(this) h(formalism) f
(the) g(path) 456 2194 y(algebra) p Fq 34 w(C) p Fs 15
w(Q) p Ft 41 w(of) p Fs 36 w(Q) p Ft 35 w(is) 36 b(giv) n(en) f(b) n(y)
g(the) h(endomorphism) f(ring) g(of) h(the) g(sum) g(of) f(the) i(v) n
(ertices.) 456 2293 y(Note) c(that) p Fq 35 w(C) p Ft
15 w(\() p Fs(Q) p Fp 1001 2263 a(opp) p Ft 1117 2293
a(\)) h(=) f(\() p Fq(C) p Fs 15 w(Q) p Ft(\)) p Fp 1465
2263 a(opp) p Ft 1582 2293 a(.) 55 b(A) 35 b(morphism) e(of) h(quiv) n
(ers) e(is) i(a) g(functor) f(b) r(et) n(w) n(een) h(the) 456
2393 y(asso) r(ciated) 22 b(categories.) 33 b(Suc) n(h) 24
b(a) f(morphism) g(induces) g(a) g(ring) g(homomorphism) g(b) r(et) n
(w) n(een) g(the) 456 2492 y(asso) r(ciated) j(path) i(algebras.) 555
2592 y(If) p Fs 21 w(Q) p Ft 21 w(is) 21 b(a) f(quiv) n(er) g(with) h
(relations) f(then) h(Mo) r(d\() p Fs(Q) p Ft(\)) g(is) g(the) g
(category) e(of) p Fq 21 w(C) p Ft 14 w(-linear) 26 b(con) n(tra) n(v)
-5 b(ari-) 456 2692 y(an) n(t) 31 b(functors) f(on) p
Fs 31 w(Q) p Ft 31 w(with) i(v) -5 b(alues) 31 b(in) p
Fq 32 w(C) p Ft 15 w(-v) n(ector) k(spaces.) 47 b(By) 31
b(Y) -7 b(oneda's) 31 b(lemma) g(w) n(e) g(obtain) 456
2791 y(a) 26 b(full) h(faithful) g(functor) p Fs 26 w(Q) p
Fr 23 w(!) p Ft 23 w(Mo) r(d\() p Fs(Q) p Ft(\)) g(whose) e(image) h
(consists) f(of) i(\014nitely) f(generated) g(pro-) 456
2891 y(jectiv) n(es.) 38 b(In) n(v) n(oking) 27 b(Morita) g(theory) h
(or) f(directly) h(one) g(sees) g(that) h(Mo) r(d\() p
Fs(Q) p Ft(\)) f(is) h(equiv) -5 b(alen) n(t) 28 b(to) 456
2991 y(Mo) r(d\() p Fs(k) s(Q) p Ft(\),) f(the) h(category) e(of) i
(righ) n(t) p Fs 26 w(k) s(Q) p Ft(-mo) r(dules.) 555
3090 y(W) -7 b(e) 25 b(no) n(w) g(use) f(the) h(notations) f(from) h
(Section) g(8.) 35 b(W) -7 b(e) 25 b(denote) g(the) g(quiv) n(er) f
(\(with) h(relations\)) 456 3190 y(giv) n(en) 34 b(in) h(Figure) f(1) g
(b) n(y) g(\001.) 59 b(If) 35 b(w) n(e) f(view) h(\001) g(as) f(a) p
Fq 34 w(C) p Ft 15 w(-linear) 40 b(additiv) n(e) 34 b(category) f(then)
i(it) h(is) 456 3289 y(equiv) -5 b(alen) n(t) 27 b(to) h(the) g(full) h
(sub) r(category) d(of) i(coh) p Fq 13 w(P) p Fp 1988
3259 a(2) p Fo 1988 3310 a(q) p Ft 2052 3289 a(whose) f(ob) 5
b(jects) 28 b(are) f(\014nite) h(direct) g(sums) g(of) 456
3392 y(the) p Fr 30 w(O) p Fn 667 3407 a(P) p Fm 708
3390 a(2) p Fl 708 3423 a(q) p Ft 739 3392 a(\() p Fs(i) p
Ft(\)) p Fo 832 3407 a(i) p Fp(=0) p Fo(;:::) p Fk(j) p
Fo(w) p Fk 2 w(j) p Ft 1142 3392 a(in) i(suc) n(h) f(a) g(w) n(a) n(y) g
(that) g(the) p Fs 30 w(i) p Ft('th) h(v) n(ertex) f(from) g(the) h
(left) g(\(coun) n(ting) g(from) 456 3526 y(0\)) d(corresp) r(onds) f
(to) p Fr 27 w(O) p Fn 1180 3541 a(P) p Fm 1222 3524
a(2) p Fl 1222 3558 a(q) p Ft 1253 3526 a(\() p Fs(i) p
Ft(\).) 37 b(It) 28 b(follo) n(ws) f(that) p Fq 28 w(C) p
Ft 15 w(\001) i(=) 22 b(End\() p Fr(\010) p Fk 2434 3483
a(j) p Fo(w) p Fk 2 w(j) p Fo 2434 3549 a(i) p Fp(=0) p
Fr 2546 3526 a(O) p Fn 2612 3541 a(P) p Fm 2653 3524
a(2) p Fl 2653 3558 a(q) p Ft 2684 3526 a(\() p Fs(i) p
Ft(\)\)) i(=) f(End) o(\() p Fr(E) p Ft 7 w(\)) h(=) p
Fs 23 w(B) p Ft 4 w(.) 555 3636 y(As) d(noted) g(in) h(Section) f(8,) h
(the) f(functor) p Fj 21 w(R) p Ft(Hom) p Fn 2020 3651
a(P) p Fm 2061 3634 a(2) p Fl 2061 3668 a(w) p Ft 2107
3636 a(\() p Fr(E) p Fs 7 w(;) p Fr 14 w(\000) p Ft(\)) g(de\014nes) g
(an) g(equiv) -5 b(alence) 21 b(b) r(et) n(w) n(een) 456
3746 y(the) 31 b(triangulated) f(categories) p Fs 29
w(D) p Fo 1534 3716 a(b) 1532 3770 y(f) p Ft 1575 3746
a(\(coh\() p Fq(P) p Fp 1816 3716 a(2) p Fo 1816 3767
a(q) p Ft 1852 3746 a(\)\)) i(and) p Fs 31 w(D) p Fo
2184 3716 a(b) p Ft 2218 3746 a(\(mo) r(d\() p Fs(B) p
Ft 4 w(\)\).) 49 b(The) 31 b(in) n(v) n(erse) f(functor) h(is) 456
3903 y(giv) n(en) 20 b(b) n(y) p Fr 22 w(\000) p Fo 856
3838 a(L) p Fr 848 3903 a(\012) p Fo 912 3915 a(B) p
Fr 975 3903 a(E) p Ft 7 w(.) 35 b(It) 22 b(is) g(clear) f(that) h(this)
f(equiv) -5 b(alence) 22 b(restricts) e(to) i(an) f(equiv) -5
b(alence) 22 b(b) r(et) n(w) n(een) 456 4002 y(the) 28
b(follo) n(wing) e(t) n(w) n(o) h(sub) r(categories) p
Fr 1058 4153 a(X) p Fp 1117 4165 a(1) p Ft 1178 4153
a(=) p Fr 23 w(fM) 22 b(2) p Ft 23 w(coh\() p Fq(P) p
Fp 1717 4118 a(2) p Fo 1717 4173 a(q) p Ft 1753 4153
a(\)) p Fr 23 w(j) p Ft 24 w(Ext) p Fo 1987 4116 a(i) p
Fn 1987 4173 a(P) p Fm 2029 4157 a(2) p Fl 2029 4190
a(q) p Ft 2060 4153 a(\() p Fr(E) p Fs 7 w(;) p Fr 14
w(M) p Ft(\)) h(=) g(0) k(for) p Fs 27 w(i) p Fr 23 w(6) p
Ft(=) c(1) p Fr(g) p Ft 456 4314 a(and) p Fr 1076 4430
a(Y) p Fp 1131 4442 a(1) p Ft 1192 4430 a(=) p Fr 23
w(f) p Fs(M) p Fr 31 w(2) p Ft 23 w(mo) r(d) q(\() p
Fs(B) p Ft 4 w(\)) p Fr 23 w(j) p Ft 23 w(T) -7 b(or) p
Fo 1999 4394 a(B) 1999 4451 y(i) p Ft 2057 4430 a(\() p
Fs(M) t(;) p Fr 14 w(E) p Ft 7 w(\)) 23 b(=) g(0) k(for) p
Fs 27 w(i) p Fr 23 w(6) p Ft(=) c(1) p Fr(g) p Ft 456
4566 a(The) 37 b(in) n(v) n(erse) g(equiv) -5 b(alences) 37
b(b) r(et) n(w) n(een) g(these) h(categories) d(are) i(giv) n(en) g(b) n
(y) g(Ext) p Fp 2983 4530 a(1) p Fn 2983 4587 a(P) p
Fm 3024 4570 a(2) p Fl 3024 4603 a(q) p Ft 3056 4566
a(\() p Fr(E) p Fs 7 w(;) p Fr 14 w(\000) p Ft(\)) h(and) 456
4695 y(T) -7 b(or) p Fo 583 4659 a(B) p Fp 583 4716 a(1) p
Ft 640 4695 a(\() p Fr(\000) p Fs(;) p Fr 14 w(E) p Ft
7 w(\).) 555 4795 y(As) 28 b(b) r(efore) f(w) n(e) g(denote) g(b) n(y) p
Fq 27 w(P) p Fp 1483 4765 a(1) p Ft 1547 4795 a(the) h(line) f(at) h
(in\014nit) n(y) g(in) p Fq 27 w(P) p Fp 2382 4765 a(2) p
Fo 2382 4816 a(q) p Ft 2418 4795 a(.) 37 b(Note) 28 b(that) p
Fq 27 w(P) p Fp 2910 4765 a(1) p Ft 2974 4795 a(is) f(a) g(w) n(eigh) n
(ted) 456 4903 y(pro) 5 b(jectiv) n(e) 26 b(line) i(in) g(the) g(sense)
f(of) g([2].) 37 b(The) 28 b(inclusion) p Fq 27 w(P) p
Fp 2262 4873 a(1) p Fr 2321 4903 a(!) p Fq 23 w(P) p
Fp 2479 4873 a(2) p Fo 2479 4923 a(q) p Ft 2543 4903
a(is) f(denoted) h(b) n(y) p Fs 27 w(i) p Ft(.) 555 5010
y(Let) 41 b(us) f(denote) h(b) n(y) p Fr 40 w(R) p Ft
41 w(the) g(full) g(sub) r(category) e(of) h(coh\() p
Fq(P) p Fp 2461 4980 a(2) p Fo 2461 5031 a(q) p Ft 2497
5010 a(\)) h(whose) f(ob) 5 b(jects) 40 b(ha) n(v) n(e) f(the) 456
5113 y(prop) r(ert) n(y) c(that) p Fr 36 w(M) i(6) 1129
5091 y(\030) p Ft 1129 5117 a(=) p Fr 1232 5113 a(O) p
Fn 1298 5128 a(P) p Fm 1339 5111 a(2) p Ft 1406 5113
a(and) p Fs 36 w(i) p Fk 1605 5083 a(\003) p Ft 1643
5113 a(\() p Fr(M) p Ft(\)) p Fr 1845 5091 a(\030) p
Ft 1845 5117 a(=) p Fr 1947 5113 a(O) p Fn 2013 5128
a(P) p Fm 2054 5111 a(1) p Ft 2085 5113 a(.) 63 b(Using) 36
b(the) h(results) e(in) i(Section) f(4) g(one) 456 5216
y(sho) n(ws) 28 b(that) p Fr 29 w(R) e(\032) f(X) p Fp
1122 5228 a(1) p Ft 1189 5216 a(and) k(furthermore) f(that) i(the) g
(image) e(of) p Fr 29 w(R) p Ft 30 w(under) h(Ext) p
Fp 2946 5179 a(1) p Ft 2984 5216 a(\() p Fr(E) p Fs 7
w(;) p Fr 14 w(\000) p Ft(\)) g(lies) g(in) p Fp 1933
5315 a(1) p 90 rotate dyy eop
%%Page: 2 2
2 1 bop Fp 456 251 a(2) p Ft 456 450 a(the) 28 b(follo) n(wing) e
(category) p Fr 539 626 a(C) p Fp 583 638 a(1) p Ft 643
626 a(=) p Fr 22 w(f) p Fs(M) p Fr 31 w(2) p Ft 24 w(Mo) r(d\(\001\)) p
Fr 24 w(j) p Fs 23 w(M) p Ft 9 w(\() p Fs(Z) p Fo 1511
638 a(i) p Ft 1538 626 a(\)) i(is) f(an) h(isomorphism) e(for) p
Fs 27 w(i) p Ft 23 w(=) d(1) p Fs(;) 14 b(:) g(:) g(:) f(;) p
Fr 14 w(j) p Fs(w) p Fr 2 w(j) 19 b(\000) p Ft 18 w(1) p
Fs(;) 847 755 y(M) p Ft 9 w(\() p Fs(Z) p Fp 1026 767
a(0) p Ft 1063 755 a(\)) 28 b(is) f(surjectiv) n(e) g(with) h(one) f
(dimensional) h(k) n(ernel) e(and) i(all) p Fs 27 w(M) p
Ft 9 w(\() p Fs(i) p Ft(\)) 2540 885 y(are) e(\014nite) i(dimensional) p
Fr(g) p Ft 456 1040 a(W) -7 b(e) 37 b(de\014ne) p Fr
37 w(C) p Fp 901 1052 a(2) p Ft 975 1040 a(as) f(the) h(category) e
(consisting) g(of) i(triples) g(\() p Fs(W) n(;) p Fq
14 w(X) p Fs(;) p Fq 14 w(Y) p Ft(\)) f(where) p Fs 36
w(W) p Ft 49 w(is) h(a) f(\014nite) 456 1140 y(dimensional) 27
b(v) n(ector) g(space) h(and) p Fq 28 w(X) p Fs(;) p
Fq 14 w(Y) p Ft 27 w(are) g(endomorphisms) f(of) p Fs
28 w(W) p Ft 41 w(satisfying) g(rk\([) p Fq(Y) p Fs(;) p
Fq 14 w(X) p Ft(]) p Fr 18 w(\000) p Ft 456 1240 a(Id\)) j(=) f(1.) 48
b(Let) p Fs 32 w(M) p Fr 38 w(2) 30 b(C) p Fp 1202 1252
a(1) p Ft 1239 1240 a(.) 49 b(Then) 31 b(up) h(to) g(a) f(canonical) f
(isomorphism) g(w) n(e) i(ma) n(y) e(assume) h(that) p
Fs 456 1339 a(M) p Ft 9 w(\(1\)) 22 b(=) p Fr 23 w(\001) 14
b(\001) g(\001) p Ft 23 w(=) p Fs 23 w(M) p Ft 9 w(\() p
Fr(j) p Fs(w) p Fr 2 w(j) p Ft(\)) 28 b(and) p Fs 28
w(M) p Ft 9 w(\() p Fs(Z) p Fp 1600 1351 a(1) p Ft 1636
1339 a(\)) c(=) p Fr 22 w(\001) 14 b(\001) g(\001) p
Ft 23 w(=) p Fs 23 w(M) p Ft 9 w(\() p Fs(Z) p Fk 2166
1354 a(j) p Fo(w) p Fk 2 w(j\000) p Fp(1) p Ft 2344 1339
a(\)) 23 b(=) g(Id.) 555 1439 y(Put) p Fs 38 w(W) p Ft
53 w(=) p Fs 40 w(M) p Ft 9 w(\() p Fr(j) p Fs(w) p Fr
2 w(j) p Ft(\),) p Fq 42 w(X) p Ft 41 w(=) p Fs 40 w(M) p
Ft 9 w(\() p Fs(X) p Fp 1687 1451 a(1) p Ft 1724 1439
a(\),) p Fq 41 w(Y) p Ft 40 w(=) p Fs 40 w(M) p Ft 9
w(\() p Fs(Y) p Fp 2196 1451 a(1) p Ft 2233 1439 a(\)) 39
b(and) p Fq 38 w(Z) p Ft 34 w(=) p Fs 40 w(M) p Ft 9
w(\() p Fs(Z) p Fp 2856 1451 a(0) p Ft 2893 1439 a(\).) 68
b(T) -7 b(aking) 38 b(in) n(to) 456 1539 y(accoun) n(t) 26
b(that) p Fs 28 w(M) p Ft 36 w(is) i(a) f(con) n(tra) n(v) -5
b(arian) n(t) 25 b(functor) i(w) n(e) h(\014nd) p Fs
1236 1690 a(M) p Ft 9 w(\() p Fs(X) p Fp 1427 1702 a(1) p
Ft 1464 1690 a(\)) 23 b(=) p Fs 23 w(M) p Ft 9 w(\() p
Fs(X) p Fp 1798 1702 a(2) p Ft 1835 1690 a(\)) g(=) p
Fr 23 w(\001) 14 b(\001) g(\001) p Ft 23 w(=) p Fs 23
w(M) p Ft 9 w(\() p Fs(X) p Fo 2377 1702 a(w) p Fm 2425
1710 a(2) p Ft 2461 1690 a(\)) 23 b(=) p Fq 23 w(X) p
Fs 1267 1819 a(M) p Ft 9 w(\() p Fs(Y) p Fp 1437 1831
a(1) p Ft 1474 1819 a(\)) h(=) p Fs 22 w(M) p Ft 9 w(\() p
Fs(Y) p Fp 1787 1831 a(2) p Ft 1825 1819 a(\)) f(=) p
Fr 23 w(\001) 14 b(\001) g(\001) p Ft 23 w(=) p Fs 22
w(M) p Ft 9 w(\() p Fs(Y) p Fo 2345 1831 a(w) p Fm 2393
1839 a(1) p Ft 2430 1819 a(\)) 23 b(=) p Fq 23 w(Y) p
Fs 1707 1949 a(M) p Ft 9 w(\() p Fs(X) p Fp 1898 1961
a(0) p Ft 1935 1949 a(\)) g(=) p Fq 23 w(Z) o(X) p Fs
1717 2078 a(M) p Ft 9 w(\() p Fs(Y) p Fp 1887 2090 a(0) p
Ft 1925 2078 a(\)) g(=) p Fq 22 w(ZY) p Ft 456 2234 a(It) j(follo) n
(ws) f(that) p Fq 27 w(Z) p Ft -1 w(\() p Fq(Y) o(X) p
Fr 10 w(\000) p Fq 15 w(XY) p Fr 14 w(\000) p Ft 15 w(Id\)) f(=) e(0) k
(and) g(hence) g(\() p Fs(W) n(;) p Fq 14 w(X) p Fs(;) p
Fq 14 w(Y) p Ft(\)) p Fr 22 w(2) e(C) p Fp 2668 2246
a(2) p Ft 2705 2234 a(.) 36 b(It) 27 b(is) f(clear) f(that) h(this) 456
2334 y(pro) r(cedure) g(is) i(rev) n(ersible) e(and) h(de\014nes) h(an)
f(equiv) -5 b(alence) p Fr 27 w(C) p Fp 2326 2346 a(2) p
Fr 2386 2311 a(\030) p Ft 2386 2338 a(=) p Fr 2474 2334
a(C) p Fp 2518 2346 a(1) p Ft 2555 2334 a(.) 555 2433
y(Let) p Fs 29 w(R) p Ft 30 w(b) r(e) 29 b(the) h(category) d(of) i
(non-trivial) e(rank) h(one) h(pro) 5 b(jectiv) n(e) 28
b(righ) n(t) p Fs 28 w(A) p Ft(-mo) r(dules) h(\(with) 456
2533 y(maps) g(giv) n(en) h(b) n(y) g(isomorphisms\).) 43
b(If) p Fs 30 w(N) p Fr 36 w(2) p Fs 28 w(R) p Ft 31
w(then) 31 b(according) d(to) i(Section) g(4) g(there) g(exists,) 456
2632 y(up) e(to) f(isomorphism,) g(a) g(unique) h(extension) p
Fr 27 w(M) p Ft 27 w(of) p Fs 28 w(N) p Ft 36 w(to) p
Fq 27 w(P) p Fp 2370 2602 a(2) p Fo 2370 2653 a(q) p
Ft 2434 2632 a(whic) n(h) g(lies) f(in) p Fr 28 w(R) p
Ft(.) 555 2732 y(Summarizing) g(w) n(e) g(no) n(w) g(ha) n(v) n(e) g(a)
g(comp) r(osition) g(of) h(functors:) 456 2899 y(\(A.1\)) p
Fs 955 w(R) p Fk 1710 2838 a(\030) p Fp 1710 2856 a(=) p
Fr 1689 2899 a(\000) -43 b(!) 23 b(R) p Fs 23 w(,) p
Fr -14 w(!) g(C) p Fp 2069 2911 a(1) p Fr 2129 2877 a(\030) p
Ft 2129 2904 a(=) p Fr 2217 2899 a(C) p Fp 2261 2911
a(2) p Ft 456 3050 a(\(that) 28 b(the) g(\014rst) f(functor) h(is) g
(an) f(equiv) -5 b(alence) 27 b(follo) n(ws) g(for) g(example) h(from) f
(the) h(easily) f(pro) n(v) n(ed) 456 3150 y(fact) e(that) g(the) g(ob)
5 b(jects) 24 b(in) p Fr 25 w(C) p Fp 1353 3162 a(2) p
Ft 1415 3150 a(are) g(simple) h(ob) 5 b(jects) 24 b(when) h(considered)
f(as) g(represen) n(tations) f(of) 456 3249 y(the) 28
b(t) n(w) n(o) e(lo) r(op) i(quiv) n(er\).) p Fj 456
3374 a(Lemma) h(A.1.) p Ft 41 w(\(A.1\)) p Fi 30 w(is) h(an) g(e) l
(quivalenc) l(e.) 456 3547 y(Pr) l(o) l(of.) p Ft 43
w(Note) 25 b(that) h(w) n(e) g(are) e(not) i(allo) n(w) n(ed) e(deduce)
i(this) g(result) g(from) f(Theorem) g(1.1) g(since) g(the) 456
3647 y(pro) r(of) i(of) g(that) h(theorem) f(dep) r(ends) h(on) f
(Theorem) g(1.3!) 555 3746 y(Belo) n(w) c(w) n(e) h(will) h(construct) e
(a) h(\(left\)) i(in) n(v) n(erse) d(to) h(\(A.1\)) g(whic) n(h) h(is) f
(indep) r(enden) n(t) h(of) p Fs 24 w(w) p Ft 2 w(.) 37
b(This) 456 3846 y(means) 29 b(that) i(in) f(principle) h(w) n(e) f(ha)
n(v) n(e) f(to) h(pro) n(v) n(e) e(the) j(lemma) f(only) g(for) g(one) g
(particular) p Fs 28 w(w) p Ft 2 w(.) 46 b(If) p Fs 456
3946 a(w) p Ft 25 w(=) 23 b(\(1) p Fs(;) p Ft 14 w(1\)) h(then) h(the) g
(lemma) g(can) f(b) r(e) h(deduced) g(from) f(the) h(results) f(in) h
([1,) g(3) o(,) g(4) o(]) g(although) f(the) 456 4045
y(p) r(oin) n(t) j(of) h(view) f(in) h(these) g(pap) r(ers) f(is) g
(sligh) n(tly) g(di\013eren) n(t.) 555 4145 y(W) -7 b(e) 25
b(will) g(giv) n(e) f(a) g(pro) r(of) g(whic) n(h) h(w) n(orks) e
(equally) h(w) n(ell) g(for) g(all) p Fs 24 w(w) p Ft
2 w(.) 37 b(P) n(erhaps) 23 b(the) i(metho) r(d) g(has) 456
4244 y(some) i(indep) r(enden) n(t) h(in) n(terest.) 555
4344 y(Let) p Fs 28 w(M) p Fr 32 w(2) 23 b(C) p Fp 939
4356 a(1) p Ft 976 4344 a(.) 37 b(W) -7 b(e) 28 b(need) g(to) f(pro) n
(v) n(e) f(t) n(w) n(o) h(things:) 597 4507 y(\(1\)) p
Fs 41 w(M) p Fr 34 w(2) e(Y) p Fp 994 4519 a(1) p Ft
1032 4507 a(,) k(i.e.) p Fs 40 w(M) p Fo 1349 4442 a(L) p
Fr 1339 4507 a(\012) p Fo 1404 4519 a(B) p Fr 1480 4507
a(E) p Ft 36 w(has) f(its) h(only) f(non-v) -5 b(anishing) 28
b(cohomology) f(in) i(degree) e(-1.) 744 4607 y(This) h(has) f(the) h
(e\013ect) g(that) p Fs 28 w(M) p Ft 36 w(is) g(in) g(the) g(image) e
(of) i(some) f(ob) 5 b(ject) 27 b(in) p Fr 28 w(X) p
Fp 3014 4619 a(1) p Ft 3052 4607 a(.) 597 4744 y(\(2\)) p
Fs 41 w(M) p Ft 37 w(is) g(actually) g(in) h(the) g(image) f(of) p
Fr 27 w(R) p Ft(,) h(i.e.) p Fs 37 w(i) p Fk 2128 4714
a(\003) p Ft 2166 4744 a(\() p Fs(H) p Fk 2274 4714 a(\000) p
Fp(1) p Ft 2363 4744 a(\() p Fs(M) p Fo 2513 4679 a(L) p
Fr 2504 4744 a(\012) p Fo 2568 4756 a(B) p Fr 2644 4744
a(E) p Ft 7 w(\)\)) p Fr 2783 4722 a(\030) p Ft 2783
4748 a(=) p Fr 2870 4744 a(O) p Fn 2936 4759 a(P) p Fm
2978 4742 a(1) p Ft 3008 4744 a(.) 456 4869 y(No) n(w) p
Fq 26 w(P) p Fp 696 4839 a(2) p Fo 696 4890 a(q) p Ft
759 4869 a(has) e(the) h(pleasan) n(t) f(prop) r(ert) n(y) f(that) i
(if) g(0) p Fr 23 w(6) p Ft(=) p Fr 23 w(M) 22 b(2) p
Ft 24 w(coh) o(\() p Fq(P) p Fp 2527 4839 a(2) p Ft 2564
4869 a(\)) 27 b(then) p Fs 27 w(i) p Fk 2840 4839 a(\003) p
Ft 2878 4869 a(\() p Fr(M) p Ft(\)) p Fr 23 w(6) p Ft(=) c(0.) 36
b(F) -7 b(rom) 456 4969 y(this) 23 b(w) n(e) g(easily) g(deduce) g
(that) h(1.,2.) 35 b(ab) r(o) n(v) n(e) 22 b(are) g(actually) h(equiv)
-5 b(alen) n(t) 23 b(to) g(the) h(follo) n(wing) e(single) 456
5069 y(statemen) n(t:) 597 5216 y(\(3\)) p Fs 41 w(Li) p
Fk 830 5185 a(\003) p Ft 868 5216 a(\() p Fs(M) p Fo
1017 5151 a(L) p Fr 1008 5216 a(\012) p Fo 1073 5228
a(B) p Fr 1148 5216 a(E) p Ft 7 w(\)) p Fr 1255 5193
a(\030) p Ft 1255 5220 a(=) p Fr 1342 5216 a(O) p Fn
1408 5231 a(P) p Fm 1450 5214 a(1) p Ft 1480 5216 a([1].) p
90 rotate dyy eop
%%Page: 3 3
3 2 bop Fp 3411 251 a(3) p Ft 456 454 a(Let) p Fr 28
w(E) p Fk 649 466 a(1) p Ft 745 454 a(=) p Fr 24 w(\010) p
Fk 899 411 a(j) p Fo(w) p Fk 2 w(j\000) p Fp(1) p Fo
899 477 a(i) p Fp(=0) p Fr 1077 454 a(O) p Fn 1143 469
a(P) p Fm 1184 452 a(1) p Ft 1215 454 a(\() p Fs(i) p
Ft(\)) 29 b(and) p Fs 28 w(B) p Fk 1562 466 a(1) p Ft
1658 454 a(=) 24 b(End\() p Fr(E) p Fk 1972 466 a(1) p
Ft 2042 454 a(\).) 41 b(Then) p Fs 29 w(B) p Fk 2419
466 a(1) p Ft 2518 454 a(is) 29 b(the) g(path) f(algebra) f(of) i(the)
456 553 y(quiv) n(er) d(\001) p Fk 776 565 a(1) 712 1122
y
 tx@Dict begin tx@NodeDict begin {6.44444 0.0 5.00002 2.5 3.22221 }
false /N@a 16 {InitRnode } NewNode end end
 712 1122 a Ft(0) 1131 1122 y
 tx@Dict begin tx@NodeDict begin {6.44444 1.49998 28.86745 14.43372
2.47223 } false /N@b 16 {InitRnode } NewNode end end
 1131 1122 a Fs(w) p Fp
1190 1134 a(1) p Fr 1246 1122 a(\000) p Ft 18 w(1) 1560
1122 y
 tx@Dict begin tx@NodeDict begin {4.30554 1.49998 11.6453 5.82265 1.40277
} false /N@c 16 {InitRnode } NewNode end end
 1560 1122 a Fs(w) p Fp 1619 1134 a(1) 2034 1122
y
 tx@Dict begin tx@NodeDict begin {6.44444 1.49998 28.86745 14.43372
2.47223 } false /N@d 16 {InitRnode } NewNode end end
 2034 1122 a Fs(w) p Fp 2093 1134 a(2) p Fr 2149 1122
a(\000) p Ft 18 w(1) 2463 1122 y
 tx@Dict begin tx@NodeDict begin {4.30554 1.49998 11.6453 5.82265 1.40277
} false /N@e 16 {InitRnode } NewNode end end
 2463 1122 a Fs(w) p
Fp 2522 1134 a(2) 2938 1122 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 30.20598 15.10298 2.5 } false
/N@f 16 {InitRnode } NewNode end end
 2938 1122 a Fr(j) p Fs(w) p
Fr 2 w(j) 19 b(\000) p Ft 18 w(1) 3283 1123 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a /N@c InitNC
{ yB yA sub xB xA sub Atan dup 30.  add /AngleA ED 30.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3283 1123
a 3283 1123 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3283 1123 a 3283 1123 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 10.46085
4.78334 1.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3283 1123 a Fo
3240 1138 a(X) p Fm 3294 1146 a(0) 3283 1123 y
 tx@Dict begin PutEnd  end
 3283 1123
a 3283 1123 a
 tx@Dict begin PutEnd  end
 3283 1123 a 3283 1123 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@d /N@f InitNC
{ yB yA sub xB xA sub Atan dup 30.  add /AngleA ED 30.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3283 1123 a 3283
1123 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3283 1123 a 3283 1123 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 24.82533
4.78334 2.5 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3283 1123 a Fo 3180 1132
a(X) p Fl 3234 1140 a(w) p Fm 3276 1152 a(2) p Fh 3309
1140 a(\000) p Fm(1) 3283 1123 y
 tx@Dict begin PutEnd  end
 3283 1123 a 3283 1123
a
 tx@Dict begin PutEnd  end
 3283 1123 a 3283 1123 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a /N@e InitNC
{ yB yA sub xB xA sub Atan dup -30.  add /AngleA ED -30.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3283 1123 a 3283 1123 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3283
1123 a 3283 1123 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 8.60356
4.78334 1.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3283 1123 a Fo 3247 1138 a(Y) p Fm
3286 1146 a(0) 3283 1123 y
 tx@Dict begin PutEnd  end
 3283 1123 a 3283 1123 a
 tx@Dict begin PutEnd  end
 3283
1123 a 3283 1123 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@b /N@f InitNC
{ yB yA sub xB xA sub Atan dup -30.  add /AngleA ED -30.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3283 1123 a 3283 1123 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3283 1123
a 3283 1123 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 22.96805
4.78334 2.5 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3283 1123 a Fo 3188 1132 a(Y) p Fl 3227
1140 a(w) p Fm 3269 1152 a(1) p Fh 3301 1140 a(\000) p
Fm(1) 3283 1123 y
 tx@Dict begin PutEnd  end
 3283 1123 a 3283 1123 a
 tx@Dict begin PutEnd  end
 3283 1123 a
3283 1123 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@a /N@b InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3283 1123 a 3283 1123 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@c /N@d InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3283 1123 a 3283
1123 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@e /N@f InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3283 1123 a Ft 555 1766 a(Observing) 27 b(that) p
Fj 29 w(R) p Ft(Hom\() p Fr(E) p Fk 1453 1778 a(1) p
Fs 1523 1766 a(;) p Fr 14 w(\000) p Ft(\)) h(de\014nes) h(an) f(equiv)
-5 b(alence) 28 b(b) r(et) n(w) n(een) p Fs 29 w(D) p
Fo 2907 1736 a(b) p Ft 2940 1766 a(\(coh\() p Fq(P) p
Fp 3181 1736 a(1) p Ft 3217 1766 a(\)\)) i(and) p Fs
456 1866 a(D) p Fo 527 1836 a(b) 525 1889 y(f) p Ft 567
1866 a(\() p Fs(B) p Fk 662 1878 a(1) p Ft 733 1866 a(\)) e(w) n(e) f
(w) n(an) n(t) g(to) h(understand) f(the) h(comp) r(osition) 456
2159 y(\(A.2\)) p Fs 197 w(D) p Fo 915 2124 a(b) 913
2179 y(f) p Ft 956 2159 a(\() p Fs(B) p Ft 4 w(\)) p
Fk 1132 2112 a(\000) p Fl 1190 2064 a(L) p Fk 1184 2112
a(\012) o(E) p Fr 1111 2159 a(\000) -31 b(\000) -19 b(\000) -31
b(!) p Fs 23 w(D) p Fo 1402 2124 a(b) p Ft 1436 2159
a(\(coh) o(\() p Fq(P) p Fp 1676 2124 a(2) p Fo 1676
2179 a(q) p Ft 1713 2159 a(\)\)) p Fo 1821 2112 a(Li) p
Fh 1890 2087 a(\003) p Fr 1800 2159 a(\000) j(\000) g(!) p
Fs 23 w(D) p Fo 2051 2124 a(b) p Ft 2084 2159 a(\(coh\() p
Fq(P) p Fp 2325 2124 a(1) p Ft 2362 2159 a(\)\)) p Fg
2470 2105 a(R) p Fp(Hom) o(\() p Fk(E) p Fh 2724 2113
a(1) p Fo 2785 2105 a(;) p Fk(\000) p Fp(\)) p Fr 2449
2159 a(\000) -35 b(\000) -19 b(\000) g(\000) g(\000) h(\000) f(\000) g
(\000) g(\000) -36 b(!) p Fs 24 w(D) p Fo 3009 2124 a(b) 3007
2179 y(f) p Ft 3049 2159 a(\() p Fs(B) p Fk 3144 2171
a(1) p Ft 3215 2159 a(\)) 456 2369 y(Chec) n(king) 38
b(on) h(pro) 5 b(jectiv) n(es,) 41 b(and) e(then) h(on) f(complexes) f
(of) i(pro) 5 b(jectiv) n(es) 37 b(w) n(e) i(\014nd) h(that) g(on) 456
2468 y(an) 31 b(ob) 5 b(ject) p Fs 32 w(M) p Ft 41 w(in) 32
b(Mo) r(d\(\001\)) h(the) f(comp) r(osition) g(\(A.2\)) g(is) g(giv) n
(en) f(b) n(y) h(a) g(length) g(t) n(w) n(o) f(complex) 456
2568 y(concen) n(trated) 26 b(in) i(degrees) p Fr 26
w(\000) p Ft(1) p Fs(;) p Ft 14 w(0) e(of) i(the) g(follo) n(wing) e
(form) 525 3116 y(degree) g(0:) 1084 3116 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 23.56947 11.78473 2.5 } false
/N@a 16 {InitRnode } NewNode end end
 1084 3116
a Fs(M) p Ft 9 w(\(0\)) 1446 3116 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 47.4369 23.71844 2.5 } false
/N@b 16 {InitRnode } NewNode end end
 1446 3116 a Fs(M) p
Ft 9 w(\() p Fs(w) p Fp 1627 3128 a(1) p Fr 1683 3116
a(\000) p Ft 18 w(1\)) 1994 3116 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 30.21475 15.10738 2.5 } false
/N@c 16 {InitRnode } NewNode end end
 1994 3116 a Fs(M) p
Ft 9 w(\() p Fs(w) p Fp 2175 3128 a(1) p Ft 2213 3116
a(\)) 2483 3116 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 47.4369 23.71844 2.5 } false
/N@d 16 {InitRnode } NewNode end end
 2483 3116 a Fs(M) p Ft 9 w(\() p Fs(w) p
Fp 2664 3128 a(2) p Fr 2720 3116 a(\000) p Ft 18 w(1\)) 3031
3116 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 30.21475 15.10738 2.5 } false
/N@e 16 {InitRnode } NewNode end end
 3031 3116 a Fs(M) p Ft 9 w(\() p Fs(w) p Fp 3212
3128 a(2) p Ft 3249 3116 a(\)) 3519 3116 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 48.77544 24.38771 2.5 } false
/N@f 16 {InitRnode } NewNode end end
 3519 3116
a Fs(M) p Ft 9 w(\() p Fr(j) p Fs(w) p Fr 2 w(j) 19 b(\000) p
Ft 18 w(1\)) 497 3924 y(degree) 27 b(-1:) 1084 3924 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 23.56947 11.78473 2.5 } false
/N@a1 16 {InitRnode } NewNode end end

1084 3924 a Fs(M) p Ft 9 w(\(1\)) 1517 3924 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 30.21475 15.10738 2.5 } false
/N@b1 16 {InitRnode } NewNode end end
 1517 3924
a Fs(M) p Ft 9 w(\() p Fs(w) p Fp 1698 3936 a(1) p Ft
1736 3924 a(\)) 1923 3924 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 47.4369 23.71844 2.5 } false
/N@c1 16 {InitRnode } NewNode end end
 1923 3924 a Fs(M) p Ft 9
w(\() p Fs(w) p Fp 2104 3936 a(1) p Ft 2160 3924 a(+) 18
b(1\)) 2554 3924 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 30.21475 15.10738 2.5 } false
/N@d1 16 {InitRnode } NewNode end end
 2554 3924 a Fs(M) p Ft 9 w(\() p Fs(w) p
Fp 2735 3936 a(2) p Ft 2773 3924 a(\)) 2959 3924 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 47.4369 23.71844 2.5 } false
/N@e1 16 {InitRnode } NewNode end end
 2959
3924 a Fs(M) p Ft 9 w(\() p Fs(w) p Fp 3140 3936 a(2) p
Ft 3196 3924 a(+) g(1\)) 3519 3924 y
 tx@Dict begin tx@NodeDict begin {7.5 2.5 48.77544 24.38771 2.5 } false
/N@xxx 16 {InitRnode } NewNode end end
 3519 3924 a 3591
3924 a
 tx@Dict begin tx@NodeDict begin {7.5 2.5 31.55328 15.77664 2.5 } false
/N@f1 16 {InitRnode } NewNode end end
 3591 3924 a Fs(M) p Ft 9 w(\() p Fr(j) p Fs(w) p
Fr 2 w(j) p Ft(\)) 3966 3521 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@c /N@a InitNC
{ yB yA sub xB xA sub Atan dup -20.  add /AngleA ED -20.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966 3521 a 3966 3521
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 21.8492
3.75 1.5 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3966 3521 a Fl 3875 3530 a(M) p
Fm 5 w(\() p Fl(X) p Fm 4001 3542 a(0) 4034 3530 y(\)) 3966
3521 y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@f /N@d InitNC
{ yB yA sub xB xA sub Atan dup -20.  add /AngleA ED -20.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966 3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 36.21368
3.75 3.11115 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966
3521 a Fl 3815 3524 a(M) p Fm 5 w(\() p Fl(X) 3941 3537
y(w) p Fm 3983 3549 a(2) p Fh 4016 3537 a(\000) p Fm(1) 4094
3524 y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521
a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@e /N@a InitNC
{ yB yA sub xB xA sub Atan dup 10.  add /AngleA ED 10.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966 3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t 0.7 def LPut end PutBegin  end
 3966 3521 a 3966
3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 20.40645
3.75 1.5 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3966 3521 a Fl 3881 3530 a(M) p Fm 5 w(\() p Fl(Y) p
Fm 3995 3542 a(0) 4028 3530 y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end
 3966 3521
a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@f /N@b InitNC
{ yB yA sub xB xA sub Atan dup 10.  add /AngleA ED 10.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966 3521 a 3966
3521 a
 tx@Dict begin tx@NodeDict begin /t 0.35 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 34.77094
3.75 3.11115 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966 3521 a Fl 3821 3524
a(M) p Fm 5 w(\() p Fl(Y) 3935 3537 y(w) p Fm 3977 3549
a(1) p Fh 4010 3537 a(\000) p Fm(1) 4088 3524 y(\)) 3966
3521 y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@a /N@b InitNC { NCLine  } if end gsave 1.42262 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@c /N@d InitNC { NCLine  } if end gsave 1.42262 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@e /N@f InitNC { NCLine  } if end gsave 1.42262 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3966
3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@c1 /N@a1 InitNC
{ yB yA sub xB xA sub Atan dup -20.  add /AngleA ED -20.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966 3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t 0.65 def LPut end PutBegin  end
 3966 3521
a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 21.8492
3.75 1.5 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3966 3521 a Fl 3875 3530 a(M) p Fm 5 w(\() p
Fl(X) p Fm 4001 3542 a(1) 4034 3530 y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end

3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@f1 /N@d1 InitNC
{ yB yA sub xB xA sub Atan dup -20.  add /AngleA ED -20.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966
3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t 0.35 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 27.39412
3.75 2.49998 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966 3521
a Fl 3852 3526 a(M) p Fm 5 w(\() p Fl(X) 3978 3534 y(w) p
Fm 4020 3546 a(2) 4057 3526 y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end
 3966 3521
a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@e1 /N@a1 InitNC
{ yB yA sub xB xA sub Atan dup 10.  add /AngleA ED 10.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966 3521 a 3966
3521 a
 tx@Dict begin tx@NodeDict begin /t 0.6 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 20.40645
3.75 1.5 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3966 3521 a Fl 3881 3530
a(M) p Fm 5 w(\() p Fl(Y) p Fm 3995 3542 a(1) 4028 3530
y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a
3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@f1 /N@b1 InitNC
{ yB yA sub xB xA sub Atan dup 10.  add /AngleA ED 10.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 1.42262 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3966 3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 3966 3521 a 3966
3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 25.95137
3.75 2.49998 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966 3521 a Fl 3858 3526 a(M) p Fm 5 w(\() p Fl(Y) 3972
3534 y(w) p Fm 4014 3546 a(1) 4051 3526 y(\)) 3966 3521
y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@a1 /N@b1 InitNC { NCLine  } if end gsave 1.42262 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3966
3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@c1 /N@d1 InitNC { NCLine  } if end gsave 1.42262 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@e1 /N@f1 InitNC { NCLine  } if end gsave 1.42262 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3966 3521
a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a1 /N@a InitNC
{ NCLine  } if end gsave 1.42262 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3966 3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966
3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 21.00023
3.75 1.5 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3966 3521 a Fl 3879 3530 a(M) p Fm 5 w(\() p Fl(Z) p
Fm 3998 3542 a(0) 4030 3530 y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end
 3966 3521
a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@b1 /N@b InitNC
{ NCLine  } if end gsave 1.42262 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3966 3521 a 3966
3521 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 35.36472
3.75 3.11115 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966 3521 a Fl 3819 3524
a(M) p Fm 5 w(\() p Fl(Z) 3938 3537 y(w) p Fm 3980 3549
a(1) p Fh 4013 3537 a(\000) p Fm(1) 4090 3524 y(\)) 3966
3521 y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@c1 /N@c InitNC
{ NCLine  } if end gsave 1.42262 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3966 3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 26.54515
3.75 2.49998 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966
3521 a Fl 3856 3526 a(M) p Fm 5 w(\() p Fl(Z) 3975 3534
y(w) p Fm 4017 3546 a(1) 4053 3526 y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end

3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@d1 /N@d InitNC
{ NCLine  } if end gsave 1.42262 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3966
3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 35.36472
3.75 3.11115 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966 3521
a Fl 3819 3524 a(M) p Fm 5 w(\() p Fl(Z) 3938 3537 y(w) p
Fm 3980 3549 a(2) p Fh 4013 3537 a(\000) p Fm(1) 4090
3524 y(\)) 3966 3521 y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521
a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@e1 /N@e InitNC
{ NCLine  } if end gsave 1.42262 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3966 3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966
3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 26.54515
3.75 2.49998 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966 3521 a Fl 3856 3526 a(M) p Fm 5 w(\() p Fl(Z) 3975
3534 y(w) p Fm 4017 3546 a(2) 4053 3526 y(\)) 3966 3521
y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@f1 /N@f InitNC
{ NCLine  } if end gsave 1.42262 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3966
3521 a 3966 3521 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3966 3521 a 3966 3521 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 36.17981
3.75 3.27779 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3966 3521
a Fl 3816 3523 a(M) p Fm 5 w(\() p Fl(Z) p Fh 3935 3539
a(j) p Fl(w) p Fh 1 w(j\000) p Fm(1) 4093 3523 y(\)) 3966
3521 y
 tx@Dict begin PutEnd  end
 3966 3521 a 3966 3521 a
 tx@Dict begin PutEnd  end
 3966 3521 a Ft 555 4560
a(It) 26 b(is) g(no) n(w) f(clear) f(that) i(if) p Fs
27 w(M) p Fr 31 w(2) e(C) p Fp 1580 4572 a(1) p Ft 1642
4560 a(then) i(the) h(image) d(of) p Fs 26 w(M) p Ft
34 w(under) i(the) g(comp) r(osition) f(\(A.2\)) 456
4660 y(is) d(equal) g(to) p Fs 22 w(S) p Ft 5 w([1]) f(where) p
Fs 22 w(S) p Ft 27 w(is) h(the) h(simple) f(ob) 5 b(ject) 22
b(in) h(Mo) r(d\(\001) p Fk 2396 4672 a(1) p Ft 2467
4660 a(\)) f(de\014ned) h(b) n(y) f(dim) p Fs 14 w(S) p
Ft 5 w(\() p Fs(i) p Ft(\)) h(=) p Fs 23 w(\016) p Fo
3361 4672 a(i) p Fp(0) p Ft 3421 4660 a(.) 456 4759 y(Since) p
Fs 27 w(S) p Ft 33 w(corresp) r(onds) i(to) p Fr 28 w(O) p
Fn 1379 4774 a(P) p Fm 1421 4757 a(1) p Fl 1421 4791
a(w) p Ft 1494 4759 a(w) n(e) i(are) f(done.) p Ff 1432
w(\003) p Ft 555 5016 a(No) n(w) k(w) n(e) f(con) n(tin) n(ue) h(with) g
(the) h(pro) r(of) e(of) h(Theorem) g(1.4.) 43 b(Theorem) 29
b(1.4) g(asserts) g(that) h(the) 456 5116 y(functor) i(\(A.1\)) i(is) f
(indep) r(enden) n(t) h(of) p Fs 32 w(w) p Ft 2 w(.) 54
b(W) -7 b(e) 34 b(pro) n(v) n(e) d(this) i(b) n(y) g(sho) n(wing) e
(that) j(the) f(in) n(v) n(erse) f(of) 456 5216 y(\(A.1\)) c(is) f
(indep) r(enden) n(t) i(of) p Fs 27 w(w) p Ft 2 w(.) p
90 rotate dyy eop
%%Page: 4 4
4 3 bop Fp 456 251 a(4) p Ft 555 450 a(Let) p Fs 28 w(W) p
Ft 35 w(=) 23 b(\() p Fs(W) n(;) p Fq 14 w(X) p Fs(;) p
Fq 14 w(Y) p Ft(\)) p Fr 22 w(2) g(C) p Fp 1384 462 a(2) p
Ft 1421 450 a(.) 37 b(Then) 28 b(the) g(asso) r(ciated) e(ob) 5
b(ject) p Fs 28 w(M) p Ft 36 w(of) 28 b(Mo) r(d\(\001\)) g(lo) r(oks) f
(lik) n(e) 456 909 y(\(A.3\)) 550 1008 y
 tx@Dict begin tx@NodeDict begin {7.51782 0.0 13.6389 6.81944 3.75891
} false /N@a 16 {InitRnode } NewNode end end
 550 1008 a Fs(W) p
Fk 640 978 a(0) 852 1008 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@b 16 {InitRnode } NewNode end end
 852 1008 a Fs(W) 1131 1008
y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@j 16 {InitRnode } NewNode end end
 1131 1008 a Fs(W) 1599 1008 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@c 16 {InitRnode } NewNode end end
 1599 1008 a Fs(W) 1878
1008 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@d 16 {InitRnode } NewNode end end
 1878 1008 a Fs(W) 2346 1008 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@e 16 {InitRnode } NewNode end end
 2346 1008 a Fs(W) 2625
1008 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@f 16 {InitRnode } NewNode end end
 2625 1008 a Fs(W) 3093 1008 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@g 16 {InitRnode } NewNode end end
 3093 1008 a Fs(W) 3372
1008 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@h 16 {InitRnode } NewNode end end
 3372 1008 a Fs(W) 3556 1009 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@c /N@a InitNC
{ yB yA sub xB xA sub Atan dup -45.  add /AngleA ED -45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3556 1009 a 3556
1009 a
 tx@Dict begin tx@NodeDict begin /t 0.6 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 9.72212
4.82222 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3556 1009 a Fn 3516 1029
a(Z) -11 b(X) 3556 1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin PutEnd  end
 3556
1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@d /N@b InitNC
{ yB yA sub xB xA sub Atan dup -45.  add /AngleA ED -45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3556 1009 a 3556 1009 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009
a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 5.0555
4.82222 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3556 1009 a Fn 3535 1029 a(X) 3556 1009
y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@h /N@e InitNC
{ yB yA sub xB xA sub Atan dup -45.  add /AngleA ED -45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3556
1009 a 3556 1009 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 5.0555
4.82222 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3556 1009
a Fn 3535 1029 a(X) 3556 1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009
a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@e /N@a InitNC
{ yB yA sub xB xA sub Atan dup 45.  add /AngleA ED 45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3556 1009 a 3556 1009 a
 tx@Dict begin tx@NodeDict begin /t 0.6 def LPut end PutBegin  end
 3556
1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 9.72212
4.82222 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3556 1009 a Fn 3516 1029 a(Z) g(Y) 3556
1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@f /N@b InitNC
{ yB yA sub xB xA sub Atan dup 45.  add /AngleA ED 45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3556 1009 a 3556 1009 a
 tx@Dict begin tx@NodeDict begin /t 0.45 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 5.0555
4.82222 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3556
1009 a Fn 3535 1029 a(Y) 3556 1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556
1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@h /N@c InitNC
{ yB yA sub xB xA sub Atan dup 45.  add /AngleA ED 45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3556 1009 a 3556 1009
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 5.0555
4.82222 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3556 1009 a Fn 3535 1029 a(Y) 3556
1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@b /N@a InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3556 1009 a 3556 1009 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 4.66663
4.82222 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3556
1009 a Fn 3537 1029 a(Z) 3556 1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556
1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@j /N@b InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3556 1009 a 3556 1009
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3556 1009 a Fp 3526 1029 a(Id) 3556
1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@d /N@c InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3556 1009 a 3556 1009 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3556
1009 a Fp 3526 1029 a(Id) 3556 1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556
1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@f /N@e InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3556 1009 a 3556 1009
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3556 1009 a Fp 3526 1029 a(Id) 3556
1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@h /N@g InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3556 1009 a 3556 1009 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3556 1009 a 3556 1009 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3556
1009 a Fp 3526 1029 a(Id) 3556 1009 y
 tx@Dict begin PutEnd  end
 3556 1009 a 3556
1009 a
 tx@Dict begin PutEnd  end
 3556 1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@j /N@c InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3556 1009 a 3556 1009
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@d /N@e InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3556 1009 a 3556 1009 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@f /N@g InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3556 1009 a Ft 456 1571 a(where) p
Fs 27 w(W) p Fk 786 1540 a(0) p Ft 832 1571 a(=) p Fs
23 w(W) r(=) p Ft(im\([) p Fq(Y) p Fs(;) p Fq 14 w(X) p
Ft(]) p Fr 18 w(\000) p Ft 18 w(Id\)) 28 b(and) p Fq
27 w(Z) p Ft 17 w(:) p Fs 23 w(W) p Fr 35 w(!) p Fs 23
w(W) p Fk 2202 1540 a(0) p Ft 2253 1571 a(is) f(the) h(quotien) n(t) g
(map.) 555 1670 y(Let) p Fs 29 w(E) p Ft 33 w(b) r(e) h(the) g(righ) n
(t) p Fs 27 w(A) p Ft(-mo) r(dule) g(whic) n(h) f(is) g(the) h
(restriction) f(of) p Fr 28 w(E) p Ft 7 w(.) 39 b(Since) p
Fr 29 w(E) p Ft 35 w(has) 28 b(a) g(left) p Fs 29 w(B) p
Ft 456 1770 a(structure) f(it) i(follo) n(ws) f(that) p
Fs 28 w(E) p Ft 34 w(is) g(a) p Fs 28 w(B) p Fr 23 w(\000) p
Fs 19 w(A) p Ft(-bimo) r(dule.) 39 b(As) 29 b(a) f(Mo) r(d\(\001) p
Fp 2716 1740 a(opp) p Ft 2827 1770 a(\)) p Fr 19 w(\000) p
Fs 19 w(A) p Ft 29 w(ob) 5 b(ject) 28 b(it) h(is) 456
1870 y(giv) n(en) d(b) n(y) 630 2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@a 16 {InitRnode } NewNode end end
 630 2364 a Fs(A) 882
2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@b 16 {InitRnode } NewNode end end
 882 2364 a Fs(A) 1133 2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@j 16 {InitRnode } NewNode end end
 1133 2364 a Fs(A) 1573
2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@c 16 {InitRnode } NewNode end end
 1573 2364 a Fs(A) 1824 2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@d 16 {InitRnode } NewNode end end
 1824 2364 a Fs(A) 2265
2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@e 16 {InitRnode } NewNode end end
 2265 2364 a Fs(A) 2516 2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@f 16 {InitRnode } NewNode end end
 2516 2364 a Fs(A) 2956
2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@g 16 {InitRnode } NewNode end end
 2956 2364 a Fs(A) 3207 2364 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@h 16 {InitRnode } NewNode end end
 3207 2364 a Fs(A) 3364
2365 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a /N@c InitNC
{ yB yA sub xB xA sub Atan dup 45.  add /AngleA ED 45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3364 2365 a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364 2365
a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.90973
3.25694 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3364 2365 a Fo 3335 2379 a(x) p Fk(\001) 3364 2365
y
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@b /N@d InitNC
{ yB yA sub xB xA sub Atan dup 45.  add /AngleA ED 45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3364
2365 a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.90973
3.25694 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3364 2365
a Fo 3335 2379 a(x) p Fk(\001) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364 2365
a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@e /N@h InitNC
{ yB yA sub xB xA sub Atan dup 45.  add /AngleA ED 45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3364 2365 a 3364
2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.90973
3.25694 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 3364 2365 a Fo 3335 2379
a(x) p Fk(\001) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364
2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a /N@e InitNC
{ yB yA sub xB xA sub Atan dup -45.  add /AngleA ED -45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3364 2365 a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t 0.4 def LPut end PutBegin  end
 3364 2365
a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.68175
3.25694 1.3611 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 3364 2365 a Fo 3336 2373 a(y) p Fk 2 w(\001) 3364
2365 y
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@b /N@f InitNC
{ yB yA sub xB xA sub Atan dup -45.  add /AngleA ED -45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3364 2365 a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t 0.55 def LPut end PutBegin  end
 3364 2365 a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.68175
3.25694 1.3611 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 3364
2365 a Fo 3336 2373 a(y) p Fk 2 w(\001) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364
2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@c /N@h InitNC
{ yB yA sub xB xA sub Atan dup -45.  add /AngleA ED -45.  sub 180 add
/AngleB ED 0.67  0.67  NCCurve  } if end gsave 2.84526 2 mul CLW add
SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore gsave ArrowBc ArrowB pop pop pop pop grestore  grestore
end
 3364 2365
a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.68175
3.25694 1.3611 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 3364 2365 a Fo
3336 2373 a(y) p Fk 2 w(\001) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364 2365 a
3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a /N@b InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3364 2365 a 3364
2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3364 2365 a Fp 3334 2386
a(Id) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a
3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@b /N@j InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3364 2365 a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364
2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3364 2365 a Fp 3334 2386 a(Id) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364
2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@c /N@d InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3364 2365
a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3364 2365 a Fp
3334 2386 a(Id) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364
2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@e /N@f InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3364 2365 a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365
a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3364 2365 a Fp 3334 2386 a(Id) 3364 2365
y
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@g /N@h InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 3364
2365 a 3364 2365 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 3364 2365 a 3364 2365 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 3364 2365
a Fp 3334 2386 a(Id) 3364 2365 y
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365
a
 tx@Dict begin PutEnd  end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@c /N@j InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3364 2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@e /N@d InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3364
2365 a 3364 2365 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@g /N@f InitNC { NCLine  } if end gsave 2.84526 2 mul
CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW 0. setgray 3.0
0 0 add DotLine  grestore gsave grestore  grestore end
 3364 2365 a Ft 555 2927 a(It) i(is) g(clear) e(from)
h(the) h(ab) r(o) n(v) n(e) f(discussion) g(that) g(the) h(in) n(v) n
(erse) e(to) i(\(A.1\)) g(is) g(giv) n(en) e(b) n(y) 456
3069 y(\(A.4\)) 853 b(\() p Fs(W) n(;) p Fq 14 w(X) p
Fs(;) p Fq 14 w(Y) p Ft(\)) p Fr 22 w(7!) p Ft 23 w(T) -7
b(or) p Fo 2090 3033 a(B) p Fp 2090 3089 a(1) p Ft 2148
3069 a(\() p Fs(M) t(;) 14 b(E) p Ft 5 w(\)) 456 3205
y(Let) 32 b(pro) 5 b(j) o(\() p Fs(B) p Ft 4 w(\)) 32
b(b) r(e) h(the) f(category) e(of) i(\014nitely) g(generated) f(pro) 5
b(jectiv) n(e) 31 b(righ) n(t) p Fs 31 w(B) p Ft 4 w(-mo) r(dules) h
(and) 456 3305 y(let) 24 b(\006) h(b) r(e) g(the) f(collection) g(of) g
(maps) p Fs 24 w(Z) p Fp 1634 3317 a(1) p Fs 1671 3305
a(;) 14 b(:) g(:) g(:) g(;) g(Z) p Fk 1913 3320 a(j) p
Fo(w) p Fk 2 w(j\000) p Fp(1) p Ft 2091 3305 a(.) 36
b(Let) p Fs 24 w(B) p Fp 2358 3317 a(\006) p Ft 2434
3305 a(b) r(e) 25 b(the) g(univ) n(ersal) e(lo) r(calization) 456
3405 y(of) p Fs 27 w(B) p Ft 32 w(at) k(\006.) 555 3504
y(Let) 37 b(us) g(recall) e(ho) n(w) p Fs 37 w(B) p Fp
1305 3516 a(\006) p Ft 1393 3504 a(is) h(constructed) h([5) o(].) 64
b(W) -7 b(e) 38 b(adjoin) e(the) h(in) n(v) n(erses) e(of) i(the) g
(maps) 456 3604 y(in) k(\006) f(to) h(pro) 5 b(j) o(\() p
Fs(B) p Ft 4 w(\).) 77 b(Denote) 41 b(the) g(resulting) f(category) e
(b) n(y) j(\006) p Fk 2507 3574 a(\000) p Fp(1) p Ft
2610 3604 a(pro) 5 b(j) o(\() p Fs(B) p Ft 4 w(\).) 77
b(Then) p Fs 40 w(B) p Fp 3283 3616 a(\006) p Ft 3380
3604 a(=) 456 3703 y(End) p Fp 604 3719 a(\006) p Fh
651 3703 a(\000) p Fm(1) p Fp 740 3719 a(pro) t(j) o(\() p
Fo(B) p Fp 3 w(\)) p Ft 969 3703 a(\() p Fs(B) p Ft 4
w(\).) 62 b(No) n(w) 35 b(in) g(our) g(case) f(pro) 5
b(j\() p Fs(B) p Ft 4 w(\)) p Fr 2143 3681 a(\030) p
Ft 2143 3708 a(=) 2244 3703 y(\001) 36 b(and) f(under) g(this) h(equiv)
-5 b(alence) p Fs 35 w(B) p Ft 456 3810 a(corresp) r(onds) 18
b(to) i(the) h(sum) f(of) g(the) h(v) n(ertices.) 33
b(It) 21 b(is) f(also) f(clear) g(that) i(\006) p Fk
2597 3779 a(\000) p Fp(1) p Ft 2699 3810 a(pro) 5 b(j\() p
Fs(B) p Ft 4 w(\)) 21 b(is) f(equiv) -5 b(alen) n(t) 456
3909 y(to) 26 b(\006) p Fk 616 3879 a(\000) p Fp(1) p
Ft 705 3909 a(\001) h(whic) n(h) f(is) h(obtained) f(from) g(\001) h(b)
n(y) f(adjoining) g(in) n(v) n(erses) f(to) h(the) h(arro) n(ws) d(in) j
(\006.) 36 b(Then) p Fs 456 4009 a(B) p Fp 519 4021 a(\006) p
Ft 605 4009 a(is) e(the) h(endomorphism) f(ring) g(of) h(the) g(sum) f
(of) h(the) g(v) n(ertices) f(in) g(\006) p Fk 2746 3979
a(\000) p Fp(1) p Ft 2836 4009 a(\001,) i(i.e.) 58 b(the) 35
b(path) 456 4108 y(algebra.) g(Th) n(us) 27 b(w) n(e) g(obtain) p
Fs 28 w(B) p Fp 1433 4120 a(\006) p Ft 1507 4108 a(=) p
Fq 23 w(C) p Ft 15 w(\(\006) p Fk 1741 4078 a(\000) p
Fp(1) p Ft 1836 4108 a(\001\).) 555 4208 y(No) n(w) g(let) h(\001) p
Fp 933 4178 a(0) p Ft 998 4208 a(b) r(e) g(the) g(follo) n(wing) f
(quiv) n(er.) 1672 4526 y
 tx@Dict begin tx@NodeDict begin {6.44444 0.0 5.00002 2.5 3.22221 }
false /N@a 16 {InitRnode } NewNode end end
 1672 4526 a Ft(0) 2186 4526
y
 tx@Dict begin tx@NodeDict begin {6.44444 0.0 5.00002 2.5 3.22221 }
false /N@b 16 {InitRnode } NewNode end end
 2186 4526 a Ft(1) 2464 4527 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@a /N@b InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2464 4527 a 2464 4527
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2464 4527 a 2464 4527 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 9.35146
4.78334 1.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2464 4527 a Fo 2425 4543 a(Z) p
Fm 2470 4551 a(0) 2464 4527 y
 tx@Dict begin PutEnd  end
 2464 4527 a 2464 4527 a
 tx@Dict begin PutEnd  end

2464 4527 a 2464 4527 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup 60.  add
/AngleA ED 60.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2464 4527 a 2464 4527 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2464
4527 a 2464 4527 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 10.46085
4.78334 1.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2464 4527 a Fo 2421 4543 a(X) p Fm
2475 4551 a(1) 2464 4527 y
 tx@Dict begin PutEnd  end
 2464 4527 a 2464 4527 a
 tx@Dict begin PutEnd  end
 2464
4527 a 2464 4527 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup -120. 
add /AngleA ED -120.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if
end gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2464 4527 a 2464 4527 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2464 4527
a 2464 4527 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 8.60356
4.78334 1.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2464 4527 a Fo 2428 4543 a(Y) p Fm 2467
4551 a(1) 2464 4527 y
 tx@Dict begin PutEnd  end
 2464 4527 a 2464 4527 a
 tx@Dict begin PutEnd  end
 2464 4527
a Ft 456 4817 a(with) h(relation) g(\() p Fs(X) p Fp
1052 4829 a(1) p Fs 1089 4817 a(Y) p Fp 1137 4829 a(1) p
Fr 1193 4817 a(\000) p Fs 19 w(Y) p Fp 1325 4829 a(1) p
Fs 1362 4817 a(X) p Fp 1431 4829 a(1) p Fr 1487 4817
a(\000) p Ft 18 w(Id) q(\)) p Fs(Z) p Fp 1736 4829 a(0) p
Ft 1797 4817 a(=) c(0.) 38 b(The) 28 b(ob) n(vious) f(functor) h(\006) p
Fk 2810 4787 a(\000) p Fp(1) p Ft 2899 4817 a(\001) p
Fr 25 w(!) p Ft 24 w(\001) p Fp 3169 4787 a(0) p Ft 3235
4817 a(whic) n(h) 456 4917 y(sends) 23 b(the) g(arro) n(ws) e(in) j
(\006) f(to) h(the) f(iden) n(tit) n(y) h(on) f(the) h(v) n(ertex) e(1)
h(is) g(an) g(equiv) -5 b(alence) 23 b(of) g(categories.) 456
5016 y(So) k(w) n(e) g(\014nd) h(Mo) r(d\(\006) p Fk
1117 4986 a(\000) p Fp(1) p Ft 1207 5016 a(\001\)) p
Fr 1331 4994 a(\030) p Ft 1331 5020 a(=) 1419 5016 y(Mo) r(d\(\001) p
Fp 1686 4986 a(0) p Ft 1724 5016 a(\).) 37 b(Belo) n(w) 26
b(w) n(e) i(put) p Fs 28 w(B) p Fp 2403 4986 a(0) p Ft
2463 5016 a(=) p Fq 23 w(C) p Ft 15 w(\(\001) p Fp 2706
4986 a(0) p Ft 2750 5016 a(\).) 555 5116 y(No) n(w) 33
b(w) n(e) g(return) g(to) h(\(A.4\).) 55 b(It) 34 b(is) f(clear) g
(from) g(the) h(quiv) n(er) e(description) h(\(A.3\)) h(that) p
Fs 34 w(M) p Ft 456 5216 a(ma) n(y) 26 b(b) r(e) i(view) n(ed) g
(\(necessarily) e(in) i(unique) f(w) n(a) n(y\)) g(as) g(an) g(ob) 5
b(ject) 27 b(in) h(Mo) r(d\(\006) p Fk 2857 5185 a(\000) p
Fp(1) p Ft 2947 5216 a(\001\).) 37 b(Hence) p Fs 28 w(M) p
90 rotate dyy eop
%%Page: 5 5
5 4 bop Fp 3411 251 a(5) p Ft 456 450 a(is) 33 b(a) h(righ) n(t) p
Fs 33 w(B) p Fp 891 462 a(\006) p Ft 942 450 a(-mo) r(dule.) 56
b(In) 34 b(a) g(similar) f(w) n(a) n(y) f(it) i(follo) n(ws) f(that) p
Fs 34 w(E) p Ft 39 w(is) h(a) p Fs 34 w(B) p Fp 2836
462 a(\006) p Fr 2910 450 a(\000) p Fs 22 w(A) p Ft(-bimo) r(dule.) 456
551 y(Then) 27 b(according) f(to) i([5) o(,) g(Thm) g(4.8\(c\)]) f(w) n
(e) g(ha) n(v) n(e) g(T) -7 b(or) p Fo 2165 515 a(B) p
Fp 2165 572 a(1) p Ft 2222 551 a(\() p Fs(M) t(;) 14
b(E) p Ft 5 w(\)) 24 b(=) e(T) -7 b(or) p Fo 2712 514
a(B) p Fm 2762 522 a(\006) p Fp 2712 573 a(1) p Ft 2811
551 a(\() p Fs(M) t(;) 14 b(E) p Ft 5 w(\).) 555 651
y(Under) 30 b(the) h(equiv) -5 b(alence) 29 b(Mo) r(d\(\001) p
Fp 1662 621 a(0) p Ft 1700 651 a(\)) p Fr 1760 629 a(\030) p
Ft 1760 655 a(=) 1851 651 y(Mo) r(d\(\006) p Fk 2109
621 a(\000) p Fp(1) p Ft 2199 651 a(\001\)) h(the) h(righ) n(t) p
Fs 29 w(B) p Fp 2742 663 a(\006) p Ft 2794 651 a(-mo) r(dule) p
Fs 30 w(M) p Ft 38 w(corre-) 456 750 y(sp) r(onds) c(to) p
Fs 27 w(M) p Fp 922 720 a(0) p Ft 987 750 a(whic) n(h) g(is) h(giv) n
(en) f(b) n(y) 1289 1081 y
 tx@Dict begin tx@NodeDict begin {8.14003 0.0 20.83328 10.41664 4.07
} false /N@x 16 {InitRnode } NewNode end end
 1289 1081 a Fs(M) p Fp 1379
1051 a(0) p Ft 1439 1081 a(:) 1935 1081 y
 tx@Dict begin tx@NodeDict begin {7.51782 0.0 13.6389 6.81944 3.75891
} false /N@a 16 {InitRnode } NewNode end end
 1935 1081 a
Fs(W) p Fk 2025 1051 a(0) 2521 1081 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 10.83334 5.41667 3.41666
} false /N@b 16 {InitRnode } NewNode end end
 2521 1081 a Fs(W) 2847
1082 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@a InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2847 1082 a 2847 1082 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2847 1082 a 2847 1082
a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 4.66663
4.82222 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2847 1082 a Fn 2828 1102 a(Z) 2847 1082 y
 tx@Dict begin PutEnd  end
 2847 1082
a 2847 1082 a
 tx@Dict begin PutEnd  end
 2847 1082 a 2847 1082 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup 60.  add
/AngleA ED 60.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2847 1082 a 2847
1082 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2847 1082 a 2847 1082 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 5.0555
4.82222 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2847 1082 a Fn 2826 1102
a(X) 2847 1082 y
 tx@Dict begin PutEnd  end
 2847 1082 a 2847 1082 a
 tx@Dict begin PutEnd  end
 2847 1082 a
2847 1082 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup -120. 
add /AngleA ED -120.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if
end gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2847 1082 a 2847 1082 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2847 1082 a 2847
1082 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 5.0555
4.82222 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2847 1082 a Fn 2826 1102 a(Y) 2847 1082 y
 tx@Dict begin PutEnd  end
 2847
1082 a 2847 1082 a
 tx@Dict begin PutEnd  end
 2847 1082 a Ft 555 1393 a(No) n(w) 41
b(T) -7 b(or) p Fo 885 1356 a(B) p Fm 935 1364 a(\006) p
Fp 885 1415 a(1) p Ft 983 1393 a(\() p Fr(\000) p Fs(;) 14
b(E) p Ft 5 w(\)) 42 b(is) f(the) g(\014rst) g(left) h(deriv) n(ed) e
(functor) h(of) h(the) f(functor) p Fr 41 w(\000) 27
b(\012) p Fo 3184 1405 a(B) p Fm 3234 1413 a(\006) p
Fs 3310 1393 a(E) p Ft 50 w(:) 456 1493 y(Mo) r(d\(\006) p
Fk 714 1463 a(\000) p Fp(1) p Ft 803 1493 a(\001\)) p
Fr 30 w(!) p Ft 30 w(Mo) r(d\() p Fs(A) p Ft(\).) 50
b(Chec) n(king) 30 b(on) i(pro) 5 b(jectiv) n(es) 30
b(w) n(e) h(see) g(that) h(if) g(w) n(e) f(comp) r(ose) g(this) 456
1592 y(functor) 26 b(with) g(the) h(equiv) -5 b(alence) 25
b(Mo) r(d) q(\(\001) p Fp 1776 1562 a(0) p Ft 1813 1592
a(\)) p Fr 1869 1570 a(\030) p Ft 1869 1596 a(=) 1956
1592 y(Mo) r(d\(\006) p Fk 2214 1562 a(\000) p Fp(1) p
Ft 2304 1592 a(\001\)) h(then) h(it) f(is) g(giv) n(en) g(b) n(y) g
(tensoring) 456 1692 y(with) i(the) p Fs 28 w(B) p Fp
855 1662 a(0) p Fr 911 1692 a(\000) p Fs 18 w(A) p Ft(-mo) r(dule) p
Fs 27 w(E) p Fp 1442 1662 a(0) p Ft 1507 1692 a(whic) n(h) g(is) f
(de\014ned) h(as) f(follo) n(ws:) 1341 2023 y
 tx@Dict begin tx@NodeDict begin {8.14003 0.0 17.99994 8.99997 4.07
} false /N@x 16 {InitRnode } NewNode end end
 1341 2023
a Fs(E) p Fp 1407 1993 a(0) p Ft 1467 2023 a(:) 1962
2023 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@a 16 {InitRnode } NewNode end end
 1962 2023 a Fs(A) 2497 2023 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@b 16 {InitRnode } NewNode end end
 2497 2023 a Fs(A) 2796
2024 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@a /N@b InitNC { NCLine  } if end gsave 0.8 SLW 0. setgray
0 setlinecap stroke  grestore  grestore end
 2796 2024 a 2796 2024 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2796 2024 a 2796 2024
a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 7.3056
4.8611 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 2796 2024 a Fp 2766 2044 a(Id) 2796 2024 y
 tx@Dict begin PutEnd  end
 2796 2024
a 2796 2024 a
 tx@Dict begin PutEnd  end
 2796 2024 a 2796 2024 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup 60.  add
/AngleA ED 60.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if end gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore end
 2796 2024 a 2796
2024 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2796 2024 a 2796 2024 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.90973
3.25694 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2796 2024 a Fo 2767 2038
a(x) p Fk(\001) 2796 2024 y
 tx@Dict begin PutEnd  end
 2796 2024 a 2796 2024 a
 tx@Dict begin PutEnd  end
 2796
2024 a 2796 2024 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup -120. 
add /AngleA ED -120.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if
end gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore  grestore
end
 2796 2024 a 2796 2024 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2796 2024
a 2796 2024 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 6.68175
3.25694 1.3611 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2796 2024 a Fo 2768 2032 a(y) p Fk 2 w(\001) 2796
2024 y
 tx@Dict begin PutEnd  end
 2796 2024 a 2796 2024 a
 tx@Dict begin PutEnd  end
 2796 2024 a Ft 555 2320
a(Th) n(us) h(w) n(e) f(ha) n(v) n(e) f(sho) n(wn) h(that) h(the) g(in)
n(v) n(erse) e(to) h(\(A.1\)) i(is) e(giv) n(en) g(b) n(y) g(the) h
(functor) 456 2486 y(\(A.5\)) 797 b(\() p Fs(W) n(;) p
Fq 14 w(X) p Fs(;) p Fq 14 w(Y) p Ft(\)) p Fr 23 w(7!) p
Ft 23 w(T) -7 b(or) p Fo 2035 2450 a(B) p Fm 2088 2425
a(0) p Fp 2035 2507 a(1) p Ft 2124 2486 a(\() p Fs(M) p
Fp 2246 2452 a(0) p Fs 2283 2486 a(;) 14 b(E) p Fp 2386
2452 a(0) p Ft 2424 2486 a(\)) 456 2635 y(It) 20 b(is) g(clear) e(that)
i(this) h(in) n(v) n(erse) d(do) r(es) h(not) h(dep) r(end) h(on) p
Fs 19 w(w) p Ft 2 w(.) 35 b(This) 20 b(\014nishes) g(the) g(pro) r(of) g
(of) f(Theorem) 456 2735 y(1.4.) 555 2884 y(W) -7 b(e) 33
b(will) g(no) n(w) f(pro) n(v) n(e) f(Theorem) h(1.3) f(b) n(y) i(sho) n
(wing) e(that) i(\(A.5\)) g(is) g(compatible) f(with) h(the) 456
2983 y(Aut\() p Fs(A) p Ft(\)-actions.) 47 b(Let) 31
b(us) f(recall) g(ho) n(w) h(these) f(actions) h(are) e(de\014ned.) 47
b(Aut) q(\() p Fs(A) p Ft(\)) 32 b(is) f(generated) 456
3083 y(b) n(y) 25 b(the) i(automorphisms) e(\011) p Fo
1357 3095 a(n;\025) p Ft 1487 3083 a(and) h(\010) p Fo
1707 3095 a(m;\026) p Ft 1856 3083 a(de\014ned) g(in) h(the) f(in) n
(tro) r(duction.) 36 b(As) 26 b(explained) g(in) 456
3182 y(Section) i(7) g(there) g(is) g(an) g(Aut) q(\() p
Fs(A) p Ft(\)) h(action) f(on) p Fr 28 w(C) p Fp 1936
3194 a(2) p Ft 2001 3182 a(whic) n(h) g(on) g(the) h(generators) d
(\011) p Fo 2967 3194 a(n;\025) p Ft 3099 3182 a(and) i(\010) p
Fo 3321 3194 a(m;\026) p Ft 456 3282 a(is) f(giv) n(en) g(b) n(y) g
(\011) p Fo 936 3294 a(n;\025) p Ft 1040 3282 a(\() p
Fq(X) p Fs(;) p Fq 14 w(Y) p Ft(\)) 22 b(=) h(\() p Fq(X) p
Fs(;) p Fq 14 w(Y) p Fr 18 w(\000) p Fs 18 w(\025) p
Fq(X) p Fo 1771 3252 a(n) p Ft 1816 3282 a(\)) 28 b(and) g(\010) p
Fo 2098 3294 a(m;\026) p Ft 2221 3282 a(\() p Fq(X) p
Fs(;) p Fq 14 w(Y) p Ft(\)) 22 b(=) h(\() p Fq(X) p Fr
19 w(\000) p Fs 18 w(\026) p Fq(Y) p Fo 2858 3252 a(m) p
Fs 2920 3282 a(;) p Fq 14 w(Y) p Ft(\).) 555 3382 y(W) -7
b(e) 28 b(also) f(de\014ne) h(an) f(action) g(of) g(Aut) q(\() p
Fs(A) p Ft(\)) i(on) e(\001) p Fp 2043 3352 a(0) p Ft
2108 3382 a(\(view) n(ed) h(as) e(an) i(additiv) n(e) f(category\)) f
(b) n(y) 816 3532 y(\011) p Fo 881 3544 a(n;\025) p Ft
985 3532 a(\() p Fs(X) p Fp 1093 3497 a(1) p Ft 1130
3532 a(\)) d(=) p Fs 23 w(X) p Fp 1349 3497 a(1) p Ft
2109 3532 a(\010) p Fo 2169 3544 a(m;\026) p Ft 2292
3532 a(\() p Fs(X) p Fp 2400 3497 a(1) p Ft 2437 3532
a(\)) g(=) p Fs 23 w(X) p Fp 2656 3497 a(1) p Ft 2711
3532 a(+) p Fs 18 w(\026) p Ft(\() p Fs(X) p Fp 2952
3497 a(1) p Ft 2989 3532 a(\)) p Fo 3021 3497 a(m) p
Ft 825 3671 a(\011) p Fo 890 3683 a(n;\025) p Ft 993
3671 a(\() p Fs(Y) p Fp 1092 3636 a(1) p Ft 1130 3671
a(\)) g(=) p Fs 23 w(Y) p Fp 1339 3636 a(1) p Ft 1395
3671 a(+) p Fs 18 w(\025) p Ft(\() p Fs(X) p Fp 1634
3636 a(1) p Ft 1671 3671 a(\)) p Fo 1703 3636 a(n) p
Ft 2118 3671 a(\010) p Fo 2178 3683 a(m;\026) p Ft 2301
3671 a(\() p Fs(Y) p Fp 2400 3636 a(1) p Ft 2437 3671
a(\)) g(=) p Fs 23 w(Y) p Fp 2647 3636 a(1) p Ft 829
3810 a(\011) p Fo 894 3822 a(n;\025) p Ft 997 3810 a(\() p
Fs(Z) p Fp 1092 3775 a(0) p Ft 1130 3810 a(\)) g(=) p
Fs 23 w(Z) p Fp 1336 3775 a(0) p Ft 2122 3810 a(\010) p
Fo 2182 3822 a(m;\026) p Ft 2305 3810 a(\() p Fs(Z) p
Fp 2400 3775 a(0) p Ft 2437 3810 a(\)) g(=) p Fs 23 w(Z) p
Fp 2643 3775 a(0) p Ft 456 3959 a(This) j(is) h(w) n(ell) f(de\014ned) h
(b) r(ecause) g(of) f(the) i(Remark) d(in) i(Section) g(7.) 36
b(Th) n(us) 27 b(w) n(e) f(obtain) h(an) f(action) 456
4058 y(of) k(Aut) q(\() p Fs(A) p Ft(\)) i(on) p Fs 30
w(B) p Fp 1037 4028 a(0) p Ft 1105 4058 a(in) f(the) g(ob) n(vious) f
(w) n(a) n(y) -7 b(.) 45 b(W) -7 b(e) 31 b(obtain) f(a) h(corresp) r
(onding) d(action) j(on) p Fr 30 w(C) p Fp 3289 4070
a(1) p Ft 3357 4058 a(b) n(y) 456 4158 y(putting) p Fs
25 w(\033) p Ft 3 w(\() p Fs(M) p Fp 920 4128 a(0) p
Ft 957 4158 a(\)) 24 b(=) p Fs 22 w(M) p Fp 1190 4128
a(0) p Fo 1181 4185 a(\033) p Fh 1221 4169 a(\000) p
Fm(1) p Ft 1328 4158 a(where) p Fs 24 w(\033) p Fr 26
w(2) p Ft 24 w(Aut\() p Fs(A) p Ft(\)) i(and) p Fs 24
w(M) p Fp 2257 4128 a(0) p Fo 2248 4185 a(\033) p Fh
2288 4169 a(\000) p Fm(1) p Ft 2394 4158 a(is) f(the) g(righ) n(t) p
Fs 24 w(B) p Fp 2880 4128 a(0) p Ft 2917 4158 a(-mo) r(dule) g(whic) n
(h) 456 4261 y(is) h(equal) f(to) p Fs 26 w(M) p Fp 945
4231 a(0) p Ft 1008 4261 a(as) h(a) g(set) g(but) h(whose) e(righ) n(t)
p Fs 26 w(B) p Fp 1966 4231 a(0) p Ft 2003 4261 a(-action) g(is) h(t) n
(wisted) h(b) n(y) p Fs 26 w(\033) p Fk 2812 4231 a(\000) p
Fp(1) p Ft 2901 4261 a(.) 37 b(The) 26 b(action) g(of) 456
4361 y(Aut\() p Fs(A) p Ft(\)) j(on) p Fs 27 w(R) p Ft
28 w(is) f(de\014ned) g(similarly) -7 b(.) 555 4461 y(By) 30
b(c) n(hec) n(king) e(on) i(the) g(generators) e(\011) p
Fo 1757 4473 a(n;\025) p Ft 1890 4461 a(and) i(\010) p
Fo 2114 4473 a(m;\026) p Ft 2267 4461 a(it) g(is) g(easy) f(to) g(see) h
(that) g(the) g(actions) 456 4560 y(of) c(Aut\() p Fs(A) p
Ft(\)) i(on) p Fr 26 w(C) p Fp 1001 4572 a(1) p Ft 1064
4560 a(and) p Fr 26 w(C) p Fp 1268 4572 a(2) p Ft 1331
4560 a(are) e(compatible.) 36 b(Hence) 26 b(to) g(pro) n(v) n(e) f(our)
g(claim) h(it) h(is) f(su\016cien) n(t) h(to) 456 4677
y(pro) n(v) n(e) 20 b(that) i(the) g(functor) p Fs 21
w(M) p Fp 1357 4647 a(0) p Fr 1417 4677 a(7!) p Ft 23
w(T) -7 b(or) p Fo 1650 4641 a(B) p Fm 1703 4616 a(0) p
Fp 1650 4698 a(1) p Ft 1740 4677 a(\() p Fs(M) p Fp 1862
4647 a(0) p Fs 1899 4677 a(;) 14 b(E) p Ft 5 w(\)) 22
b(is) f(compatible) h(with) g(the) g(Aut) q(\() p Fs(A) p
Ft(\)-actions.) 456 4777 y(T) -7 b(o) 27 b(pro) n(v) n(e) f(this) i(w) n
(e) f(need) h(that) 456 4926 y(\(A.6\)) p Fo 1748 4938
a(\033) p Fs 1792 4926 a(E) p Fr 1881 4903 a(\030) p
Ft 1881 4930 a(=) p Fs 1969 4926 a(E) p Fo 2030 4941
a(\033) p Fh 2070 4925 a(\000) p Fm(1) p Ft 456 5092
a(as) p Fs 17 w(B) p Fp 615 5062 a(0) p Fr 653 5092 a(\000) p
Fs(A) p Ft(-bimo) r(dules,) 20 b(since) e(if) h(this) f(is) h(the) f
(case) g(then) h(T) -7 b(or) p Fo 2313 5056 a(B) p Fm
2366 5031 a(0) p Fp 2313 5112 a(1) p Ft 2402 5092 a(\() p
Fs(M) p Fp 2524 5062 a(0) p Fo 2515 5119 a(\033) p Fh
2555 5103 a(\000) p Fs 2609 5092 a(;) 14 b(E) p Ft 5
w(\)) p Fr 2767 5070 a(\030) p Ft 2767 5096 a(=) 2855
5092 y(T) -7 b(or) p Fo 2982 5056 a(B) p Fm 3035 5031
a(0) p Fp 2982 5112 a(1) p Ft 3072 5092 a(\() p Fs(M) p
Fp 3194 5062 a(0) p Fs 3231 5092 a(;) p Fo 3268 5104
a(\033) p Fs 3312 5092 a(E) p Ft 5 w(\)) p Fr 3434 5070
a(\030) p Ft 3434 5096 a(=) 456 5216 y(T) g(or) p Fo
583 5179 a(B) p Fm 636 5154 a(0) p Fp 583 5236 a(1) p
Ft 672 5216 a(\() p Fs(M) p Fp 794 5185 a(0) p Fs 831
5216 a(;) 14 b(E) p Fo 929 5231 a(\033) p Fh 969 5215
a(\000) p Fm(1) p Ft 1052 5216 a(\)) p Fr 1107 5193 a(\030) p
Ft 1107 5220 a(=) 1195 5216 y(T) -7 b(or) p Fo 1322 5179
a(B) p Fm 1375 5154 a(0) p Fp 1322 5236 a(1) p Ft 1411
5216 a(\() p Fs(M) p Fp 1533 5185 a(0) p Fs 1570 5216
a(;) 14 b(E) p Ft 5 w(\)) p Fo 1705 5231 a(\033) p Fh
1745 5215 a(\000) p Fm(1) p Ft 1828 5216 a(.) p 90 rotate
dyy eop
%%Page: 6 6
6 5 bop Fp 456 251 a(6) p Ft 555 450 a(T) -7 b(o) 29
b(pro) n(v) n(e) f(\(A.6\)) h(w) n(e) g(note) g(that) p
Fo 1617 462 a(\033) p Fs 1661 450 a(E) p Ft 35 w(is) g(the) g(Mo) r
(d\(\001) p Fp 2253 420 a(opp) p Ft 2364 450 a(\)) p
Fr 20 w(\000) p Fs 19 w(A) p Ft 30 w(ob) 5 b(ject) 29
b(giv) n(en) f(b) n(y) h(the) g(top) 456 550 y(quiv) n(er) d(in) i(the)
g(diagram) e(b) r(elo) n(w.) 1652 964 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@a 16 {InitRnode } NewNode end end
 1652 964 a Fs(A) 2186
964 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@b 16 {InitRnode } NewNode end end
 2186 964 a Fs(A) 1652 1536 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@a1 16 {InitRnode } NewNode end end
 1652 1536 a Fs(A) 2186
1536 y
 tx@Dict begin tx@NodeDict begin {6.83331 0.0 7.50002 3.75 3.41666
} false /N@b1 16 {InitRnode } NewNode end end
 2186 1536 a Fs(A) 2485 1250 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a /N@a1 InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 2485 1250 a 2485
1250 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485 1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 16.80905
8.64003 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2485 1250 a Fs 2415 1286
a(\033) p Fk 2465 1252 a(\000) p Fp(1) 2485 1250 y
 tx@Dict begin PutEnd  end
 2485
1250 a 2485 1250 a
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@b /N@b1 InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 3.0 -2 0 add DotLine  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 2485 1250
a 2485 1250 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485 1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 16.80905
8.64003 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2485 1250 a Fs
2415 1286 a(\033) p Fk 2465 1252 a(\000) p Fp(1) 2485
1250 y
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a /N@b InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 2485 1250 a 2485 1250 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485 1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 9.16669
6.94444 0.0 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2485
1250 a Ft 2447 1279 a(Id) 2485 1250 y
 tx@Dict begin PutEnd  end
 2485 1250 a 2485
1250 a
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup -30.  add
/AngleA ED 150.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if end gsave
2.84526 2 mul CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore gsave grestore  grestore end
 2485 1250 a 2485 1250
a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485 1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 22.34377
7.5 2.5 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 2485 1250 a Fs 2392 1271 a(\033) p
Ft 3 w(\() p Fs(x) p Ft(\)) p Fr(\001) 2485 1250 y
 tx@Dict begin PutEnd  end
 2485
1250 a 2485 1250 a
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b /N@b InitNC { yB yA sub xB xA sub Atan dup 60.  add
/AngleA ED 60.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if end gsave
2.84526 2 mul CLW add SLW 1. setgray stroke grestore gsave 0.8 SLW
0. setgray 0 setlinecap stroke  grestore gsave grestore  grestore end
 2485 1250
a 2485 1250 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485 1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 21.89009
7.5 2.5 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add
exch } PutCoor PutBegin  end
 2485 1250 a Fs
2394 1271 a(\033) p Ft 3 w(\() p Fs(y) p Ft 3 w(\)) p
Fr(\001) 2485 1250 y
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin PutEnd  end
 2485 1250
a 2485 1250 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b1 /N@b1 InitNC { yB yA sub xB xA sub Atan dup -30.
 add /AngleA ED 150.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if
end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave grestore  grestore
end
 2485 1250 a 2485 1250 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485
1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 8.49306
4.44444 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2485 1250 a Fs 2450 1269 a(x) p Fr(\001) 2485
1250 y
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 2.84544
2.84544 0 0 /N@b1 /N@b1 InitNC { yB yA sub xB xA sub Atan dup -120.
 add /AngleA ED -120.  sub 180 add /AngleB ED 5.  5.  NCCurve  } if
end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave grestore  grestore
end
 2485 1250 a 2485 1250 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485 1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 8.03938
4.44444 1.94444 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch
w1 add exch } PutCoor PutBegin  end
 2485
1250 a Fs 2452 1260 a(y) p Fr 3 w(\001) 2485 1250 y
 tx@Dict begin PutEnd  end
 2485
1250 a 2485 1250 a
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { /ArrowBc [ 6 2 roll ] cvx def ArrowBc BeginArrow 1.
 1.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  } def /NCLW CLW def
tx@NodeDict begin 0.0 0.0 neg 2.84544 2.84544 0 0 /N@a1 /N@b1 InitNC
{ NCLine  } if end gsave 2.84526 2 mul CLW add SLW 1. setgray stroke
grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore gsave
ArrowBc ArrowB pop pop pop pop grestore  grestore end
 2485 1250
a 2485 1250 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 2485 1250 a 2485 1250 a
 tx@Dict begin { 2.84544 tx@Dict /NCLW known { NCLW add } if 9.16669
6.94444 0.0 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1
add exch } PutCoor PutBegin  end
 2485 1250 a Ft
2447 1279 a(Id) 2485 1250 y
 tx@Dict begin PutEnd  end
 2485 1250 a 2485 1250 a
 tx@Dict begin PutEnd  end
 2485
1250 a Ft 456 1895 a(It) 35 b(is) g(clear) f(that) h(the) g(map) g(giv)
n(en) f(b) n(y) h(the) g(dotted) g(arro) n(ws) d(is) j(left) p
Fs 36 w(B) p Fp 2730 1865 a(0) p Ft 2767 1895 a(-linear) f(and) h(that)
g(it) 456 1995 y(t) n(wists) 27 b(the) h(righ) n(t) p
Fs 27 w(A) p Ft(-action) f(b) n(y) p Fs 27 w(\033) p
Fk 1542 1965 a(\000) p Fp(1) p Ft 1632 1995 a(.) 37 b(This) 27
b(\014nishes) h(the) g(pro) r(of) f(of) g(Theorem) g(1.3.) p
Fu 1708 2164 a(References) p Fe 456 2297 a([1]) 34 b(V.) 22
b(Barano) n(vsky) -6 b(,) 23 b(V.) f(Ginzburg,) g(and) h(A.) f
(Kuznetso) n(v,) p Fd 24 w(Quiver) h(varieties) h(and) h(a) g(non-c) l
(ommutative) p Fc 25 w(P) p Fb 3396 2273 a(2) p Fe 3425
2297 a(,) 565 2380 y(math.A) n(G/0103068.) 456 2463 y([2]) 34
b(W.) 21 b(Geigle) g(and) h(H.) e(Lenzing,) p Fd 22 w(A) i(class) i(of)
f(weighte) l(d) g(pr) l(oje) l(ctive) h(curves) e(arising) h(in) g(r) l
(epr) l(esentation) h(the-) 565 2546 y(ory) d(of) h
(\014nite-dimensional) f(algebr) l(as) p Fe(,) f(Singularities,) f
(represen) n(tation) i(of) d(algebras,) i(and) f(v) n(ector) h(bundles)
565 2629 y(\(Lam) n(brec) n(h) n(t,) g(1985\)) g(\(Berlin\),) f
(Lecture) h(Notes) f(in) f(Math.,) h(v) n(ol.) g(1273,) h(Springer,) f
(Berlin,) f(1987,) i(pp.) e(265{) 565 2712 y(297.) 456
2795 y([3]) 34 b(A.) 19 b(Kapustin,) h(A.) f(Kuznetso) n(v,) i(and) f
(D.) f(Orlo) n(v,) p Fd 19 w(Nonc) l(ommutative) j(instantons) g(and) h
(twistor) e(tr) l(ansform) p Fe(,) 565 2878 y(hep-th/0002193.) 456
2961 y([4]) 34 b(L.) 21 b(Le) g(Bruyn,) p Fd 20 w(Mo) l(duli) k(sp) l
(ac) l(es) f(for) f(right) f(ide) l(als) i(of) f(the) g(Weyl) f(algebr)
l(a) p Fe(,) g(J.) e(Algebra) p Fa 21 w(172) p Fe 20
w(\(1995\),) i(32{48.) 456 3044 y([5]) 34 b(A.) 26 b(Sc) n(ho\014eld,) p
Fd 28 w(R) l(epr) l(esentations) j(of) g(rings) f(over) g(skew) g
(\014elds) p Fe(,) g(Lecture) f(Note) g(Series,) g(v) n(ol.) f(92,) h
(London) 565 3127 y(Mathematical) d(So) r(ciet) n(y) -6
b(,) 25 b(1985.) p 90 rotate dyy eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
